<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta name="description" content="Python JWT 介绍 1. JWT 介绍 ​ jwt（ JSON Web Tokens ），是一种开发的行业标准 RFC 7519 ，用于安全的表示双方之间的声明。目前，jwt广泛应用在系统的用" />
    <meta property="og:description" content="Python JWT 介绍 1. JWT 介绍 ​ jwt（ JSON Web Tokens ），是一种开发的行业标准 RFC 7519 ，用于安全的表示双方之间的声明。目前，jwt广泛应用在系统的用" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Python JWT 介绍和使用 - ChaosMoor - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/chaosmoor/custom.css?v=tlIU4ML/3/535re&#x2B;waugXHrbklE=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/chaosmoor/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/chaosmoor/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/chaosmoor/wlwmanifest.xml" />
    <script>
        var currentBlogId = 682192;
        var currentBlogApp = 'chaosmoor';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleMemory';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-11 07:59';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/chaosmoor/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/chaosmoor/">ChaosMoor</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/chaosmoor/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/ChaosMoor">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/chaosmoor/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chaosmoor/p/14757108.html">
    <span>Python JWT 介绍和使用</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2530729260,1535014245&amp;fm=26&amp;gp=0.jpg" alt="img" loading="lazy"></p>
<h1 id="python-jwt-介绍">Python JWT 介绍</h1>
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#python-jwt-介绍">Python JWT 介绍</a><ul><li><a href="#1-jwt-介绍">1. JWT 介绍</a></li><li><a href="#2-jwt-创建-token">2. JWT 创建 token</a><ul><li><a href="#21-jwt-生成原理">2.1 JWT 生成原理</a></li><li><a href="#22-jwt-校验-token-原理">2.2 JWT 校验 token 原理</a></li></ul></li><li><a href="#3-代码实现">3. 代码实现</a></li><li><a href="#4-参数介绍">4. 参数介绍</a><ul><li><a href="#41-示例：">4.1 示例：</a></li><li><a href="#42-pyjwt-官方文档">4.2 PyJWT 官方文档</a></li></ul></li></ul></li></ul></div><p></p>
<h2 id="1-jwt-介绍">1. JWT 介绍</h2>
<p>​			jwt（ JSON Web Tokens ），是一种开发的行业标准 RFC 7519 ，用于安全的表示双方之间的声明。目前，jwt广泛应用在系统的用户认证方面，特别是现在前后端分离项目<br>
​			jwt认证流程：</p>
<p><img src="https://img2020.cnblogs.com/blog/2114297/202105/2114297-20210511195012516-41124871.jpg" alt="" loading="lazy"></p>
<p>​			在项目开发中，一般会按照上图所示的过程进行认证，即：用户登录成功之后，服务端给用户浏览器返回一个 token，以后用户浏览器要携带 token 再去向服务端发送请求，服务端校验 token 的合法性，合法则给用户看数据，否则，返回一些错误信息</p>
<p>​		传统token方式和jwt在认证方面有什么差异？</p>
<ul>
<li><strong><code>传统 token 方式</code></strong>：用户登录成功后，服务端生成一个随机 token 给用户，并且在服务端(数据库或缓存)中保存一份 token，以后用户再来访问时需携带 token，服务端接收到 token 之后，去数据库或缓存中进行校验 token 的是否超时、是否合法</li>
<li><strong><code>jwt 方式</code></strong>：用户登录成功后，服务端通过 jwt 生成一个随机 token 给用户（服务端无需保留 token），以后用户再来访问时需携带token，服务端接收到 token 之后，通过 jwt 对 token 进行校验是否超时、是否合法</li>
</ul>
<h2 id="2-jwt-创建-token">2. JWT 创建 token</h2>
<h3 id="21-jwt-生成原理">2.1 JWT 生成原理</h3>
<p>jwt 的生成 token 格式如下，即：由 . 连接的三段字符串组成</p>
<pre><code class="language-python">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lI
iwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
</code></pre>
<p>​</p>
<p>​			生成规则如下：</p>
<ul>
<li>第一段 <strong><code>HEADER</code></strong> 部分，固定包含算法和 token 类型，对此 json 进行 base64url 加密，这就是 token<br>
的第一段</li>
</ul>
<pre><code class="language-python">{
"alg": "HS256",
"typ": "JWT"
}
</code></pre>
<ul>
<li>第二段 <strong><code>PAYLOAD</code></strong> 部分，包含一些数据，对此json进行base64url加密，这就是token的第二段</li>
</ul>
<pre><code class="language-python">{
"sub": "1234567890",
"name": "John Doe",
"iat": 1516239022
...
}
</code></pre>
<ul>
<li>第三段 <strong><code>SIGNATURE</code></strong> 部分，把前两段的 base64url 密文通过. 拼接起来，然后对其进行 HS256 加密，再然后对hs256 密文进行 base64url 加密，最终得到 token 的第三段</li>
</ul>
<pre><code class="language-python">base64url(
	HMACSHA256(
		base64UrlEncode(header) + "." + base64UrlEncode(payload),
	your-256-bit-secret (秘钥加盐)
	)
)
</code></pre>
<p>​			最后将三段字符串通过 . 拼接起来就生成了 jwt 的 token</p>
<p>​			<strong>注意</strong>：base64url 加密是先做 base64 加密，然后再将 - 替代 + 及 _ 替代 /</p>
<h3 id="22-jwt-校验-token-原理">2.2 JWT 校验 token 原理</h3>
<p>​			一般在认证成功后，把 jwt 生成的 token 返回给用户，以后用户再次访问时候需要携带 token，此时 jwt 需要对token 进行超时及合法性校验<br>
​			获取 token 之后，会按照以下步骤进行校验：</p>
<ul>
<li>将token分割成 <strong><code>header_segment</code></strong> 、<strong><code>payload_segment</code></strong> 、<strong><code>crypto_segment</code></strong> 三部分</li>
</ul>
<pre><code class="language-python">JWT_TOKEN =
"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

signing_input, crypto_segment = JWT_TOKEN.rsplit('.', 1)
header_segment, payload_segment = signing_input.split('.', 1)
</code></pre>
<ul>
<li>对第一部分header_segment 进行 base64url 解密，得到 <strong><code>header</code></strong></li>
<li>对第二部分payload_segment 进行 base64url 解密，得到 <strong><code>payload</code></strong></li>
<li>对第三部分crypto_segment 进行 base64url 解密，得到 <strong><code>signature</code></strong>，针对 <strong><code>signature</code></strong> 部分数据进行合法性校验
<ul>
<li>拼接前两段密文，即：<strong><code>signing_input</code></strong></li>
<li>从第一段明文中获取加密算法，默认：<strong><code>HS256</code></strong></li>
<li>使用算法+盐 对 <strong><code>signing_input</code></strong> 进行加密，将得到的结果和 <strong><code>signature</code></strong> 密文进行比较</li>
</ul>
</li>
</ul>
<h2 id="3-代码实现">3. 代码实现</h2>
<p>​			基于 Python 的 pyjwt 模块创建 jwt 的 token</p>
<ul>
<li>安装</li>
</ul>
<pre><code class="language-python">pip3 install pyjwt
</code></pre>
<ul>
<li>实现</li>
</ul>
<pre><code class="language-python">from datetime import datetime, timedelta

import jwt


class JwtToken(object):

    _salt = "@^4_00wedv**pi)+(!w1rwi=d3q4l=ie=g-u$s8jevmj*zgg2h" 

    _expire_message = dict(code=1200, msg="token 已经失效")

    _unknown_error_message = dict(code=4200, msg="token 解析失败")

    @classmethod
    def generate_token(cls, payload: dict) -&gt; str:
        headers = dict(typ="jwt", alg="HS256")
        resut = jwt.encode(payload=payload, key=cls._salt, algorithm="HS256", headers=headers)
        return resut

    @classmethod
    def parse_token(cls, token: str) -&gt; tuple:
        verify_status = False
        try:
            payload_data = jwt.decode(token, cls._salt, algorithms=['HS256'])
            verify_status = True
        except jwt.ExpiredSignatureError:
            payload_data = cls._expire_message
        except Exception as _err:
            payload_data = cls._unknown_error_message
        return verify_status, payload_data


if __name__ == '__main__':
    TEST_DATA = dict(name="mooor", exp=datetime.utcnow() - timedelta(seconds=1))
    token = JwtToken.generate_token(TEST_DATA)
    print(token)
    payload = JwtToken.parse_token(token)
    print(payload)

</code></pre>
<p>​			<strong>注意</strong>：exp 务必选择 <strong><code>UTC</code></strong> 时间</p>
<blockquote>
<p>Expiration time will be compared to the current UTC time (as given by timegm(datetime.utcnow().utctimetuple())), so be sure to use a UTC timestamp or datetime in encoding</p>
</blockquote>
<h2 id="4-参数介绍">4. 参数介绍</h2>
<h3 id="41-示例：">4.1 示例：</h3>
<pre><code class="language-python">import jwt
import datetime

dic = {
    'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),  # 过期时间
    'iat': datetime.datetime.utcnow(),  #  开始时间
    'iss': 'ChaosMoor',                 #  签名
    'data': {                           #  内容，一般存放该用户id和开始时间
        'a': 1,
        'b': 2,
    },
}


token = jwt.encode(dic, 'secret', algorithm='HS256')                            # 加密生成字符串
print(token)

payload = jwt.decode(token, 'secret', issuer='lianzong', algorithms=['HS256'])  # 解密，校验签名
print(s)
print(type(s))
</code></pre>
<p>​			dic 有官方指定的 key，程序在解密的时候会根据 key 的 Value 判断是否合法。这些 key 有：</p>
<ul>
<li>"<strong><code>exp</code></strong>"：在生成 token 时，可以设置该 token 的有效时间，如果我们设置 1 天过期，1 天后我们再解析此 token 会抛出</li>
</ul>
<pre><code class="language-python">jwt.exceptions.ExpiredSignatureError: Signature has expired
</code></pre>
<ul>
<li>"<strong><code>nbf</code></strong>"：它指的是该 token 的生效时间，如果使用但是没到生效时间则抛出：</li>
</ul>
<pre><code class="language-python">jwt.exceptions.ImmatureSignatureError: The token is not yet valid (nbf)
</code></pre>
<ul>
<li>"<strong><code>iss</code></strong>"： token 的签发者，我们可以给他一个字符串，注意，iss 在接收时如果不检验也没有问题，如果我们接收时需要检验但是又签名不一致，则会抛出</li>
</ul>
<pre><code class="language-python">jwt.exceptions.InvalidIssuerError: Invalid issuer
</code></pre>
<ul>
<li>"<strong><code>aud</code></strong>"：指定了接收者，接收者在接收时必须提供与 token 要求的一致的接收者（字符串），如果没写接收者或者接收者不一致会抛出</li>
</ul>
<pre><code class="language-python">jwt.exceptions.InvalidAudienceError: Invalid audience
</code></pre>
<ul>
<li>"<strong><code>iat</code></strong>"：token 的开始时间，如果当前时间在开始时间之前则抛出</li>
</ul>
<pre><code class="language-python">jwt.exceptions.InvalidIssuedAtError: Issued At claim (iat) cannot be in the future.
</code></pre>
<h3 id="42-pyjwt-官方文档">4.2 PyJWT 官方文档</h3>
<p><a href="https://pyjwt.readthedocs.io/en/latest/usage.html" target="_blank">https://pyjwt.readthedocs.io/en/latest/usage.html</a><br>
<img src="https://img2020.cnblogs.com/blog/2114297/202105/2114297-20210511195425948-1604425359.png" alt="" loading="lazy"></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-11 19:59</span>&nbsp;
<a href="https://www.cnblogs.com/chaosmoor/">ChaosMoor</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14757108" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14757108);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 682192, cb_blogApp = 'chaosmoor', cb_blogUserGuid = 'bf497e55-9994-40ae-54cf-08d82f2723a1';
    var cb_entryId = 14757108, cb_entryCreatedDate = '2021-05-11 19:59', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 ChaosMoor
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvIn8t0p-eUTWHb8kaW2JNItcQ-8YTSDQ4FVmHSj9lIOfPklbce-5BaiqG9lDEJ926de8a9ljkPdOy9aJtEzWT6dRg_CBDPdGmo2bUy3ZMFKPWRBP6vvH7PmkdeIqDglJo" />
</body>
</html>
