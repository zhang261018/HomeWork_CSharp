<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta name="description" content="当人们初学 Cocoa/Objective-C 时，Objective-C Runtime 是被忽略的特性之一。原因是 Objective-C（这门语言）很容易在几小时内就熟悉，新学 Cocoa 的人" />
    <meta property="og:description" content="当人们初学 Cocoa/Objective-C 时，Objective-C Runtime 是被忽略的特性之一。原因是 Objective-C（这门语言）很容易在几小时内就熟悉，新学 Cocoa 的人" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Objective-C Runtime - 肖品 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/xiaopin/custom.css?v=HyOHRCNMalpv47REK2JE&#x2B;XrmJ9Y=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xiaopin/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xiaopin/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xiaopin/wlwmanifest.xml" />
    <script>
        var currentBlogId = 65882;
        var currentBlogApp = 'xiaopin';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleMemory';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2016-08-30 11:22';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        <style type="text/css">
    .Abstract
    {
        padding: 15px;
        border: dotted 2px #999;
        color: #999;
        font-family: 'Microsoft Yahei';
        border-radius: 4px;
    }
        
    .First
    {
        margin: 10px 0;
        font-family: 'Microsoft Yahei';
        text-align: left;
        padding: 6px 20px;
        color: #fff;
        background: #55895B;
        font-size: 20px;
        border-radius: 4px;
        clear: both;
    }
        
        
    .Second
    {
        margin: 10px 0;
        font-family: 'Microsoft Yahei';
        padding: 6px 20px;
        background: #93C8A2;
        color: #fff;
        font-size: 18px;
        border-radius: 4px;
        clear: both;
    }
        
        
    .Third
    {
        margin: 10px 0;
        padding: 6px 20px;
        font-family: 'Microsoft Yahei';
        margin: 15px 0;
        font-size: 16px;
        color: fff;
        background: #C6EFD2;
        color: #999;
        border-radius: 4px;
        clear: both;
    }
    .note
    {
        margin: 10px 0;
        padding: 15px 20px 15px 60px;
        background: #FCFAA9 url('http://images.cnblogs.com/cnblogs_com/libaoheng/305804/o_yellow-pin.png') no-repeat 20px 0;
        font-size: 15px;
        font-family: 'Microsoft Yahei';
        box-shadow: 0 0 8px #aaa;
        clear: both;
    }
        
    .demo
    {
        text-align: left;
        padding: 6px 20px;
        overflow: auto;
        border-radius: 4px;
        background: orange;
        color: #fff;
        font-size: 16px;
        clear: both;
    }
        
    .cnblogs_Highlighter
    {
        border: solid 1px #ccc;
        clear: both;
    }
        
    .cnblogs_code
    {
        background: #EFFFF4;
        border: solid 0px #939393;
        font-size: 14px;
        clear: both;
        padding: 10px 20px;
    }
    .cnblogs_code pre
    {
        font-size: 14px;
    }
    .cnblogs_code span
    {
        font-family: Courier New;
        font-size: 14px;
    }
</style>
    </div>
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/xiaopin/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xiaopin/">专注iOS、Anroid、Java、Golang、项目架构和管理</a>
</h1>
<h2>学习是一种信仰，进步是一种幸福！</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xiaopin/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%82%96%E5%93%81">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/xiaopin/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiaopin/p/5824111.html">
    <span>Objective-C Runtime</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>当人们初学 Cocoa/Objective-C 时，Objective-C Runtime 是被忽略的特性之一。原因是 Objective-C（这门语言）很容易在几小时内就熟悉，新学 Cocoa 的人花费他们大部分的时间学习 Cocoa 框架和适应它是如何工作的。然而每个人至少应该知道一些 runtime 的工作细节，需要比知道编译器会把 [target doMethodWith:var1]; &nbsp;转换为 objc_msgSend(target,@selector(doMethodWith:),var1); 更深入一些。知道 Objective-C 正在做的会让你更深入的理解 Objective-C 和你正在运行的 app。我认为 Mac/iPhone 的开发者不管你现在是什么水平，都会有收获的。</p>
<p><strong>Objective-C Runtime 是开源的</strong></p>
<p>Objective-C 是开源的，任何时候你都能从&nbsp;<a href="http://opensource.apple.com/" target="_blank">http://opensource.apple.com</a>. 获取。事实上查看 Objective-C 源码是我理解它是如何工作的第一种方式，在这个问题上要比读苹果的文档要好。你可以下载适合 Mac OS X 10.6.2 的 objc4-437.1.tar.gz。（译注：最新<a href="http://opensource.apple.com/tarballs/objc4/objc4-551.1.tar.gz" target="_blank">objc4-551.1.tar.gz</a>）</p>
<p><strong>动态 vs 静态语言</strong></p>
<p>Objective-C 是面相运行时的语言（runtime oriented language），就是说它会尽可能的把编译和链接时要执行的逻辑延迟到运行时。这就给了你很大的灵活性，你可以按需要把消息重定向给合适的对象，你甚 至可以交换方法的实现，等等（译注：在 Objective-C 中调用一个对象的方法可以看成向一个对象发送消息, Method Swizzling 具体实现可以参看&nbsp;<a href="https://github.com/rentzsch/jrswizzle" target="_blank">jrswizzle</a>&nbsp;）。这就需要使用 runtime，runtime 可以做对象自省查看他们正在做的和不能做的（don't respond to）并且合适的分发消息（译注：感兴趣的同学可以查看 NSObject 类的 – forwardingTargetForSelector: 和 – forwardInvocation: 方法。P.S. 不是 NSObject 协议！ ）。如果我们和 C 这样的语言对比。在 C 里，你从 main() 方法开始写然后就是从上到下的写逻辑了并按你写代码的顺序执行程序。一个 C 的结构体不能转发函数执行请求到其他的目标上（other targets）。很可能你的程序是这样的：</p>
<div>
<div id="highlighter_883357" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">#include 
int main(int argc, const char **argv[])
{        
    printf("Hello World!");
    return 0;
}
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>编译器解析，优化然后把优化后的代码转成汇编：</p>
<div>
<div id="highlighter_566684" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">.text
 .align 4,0x90
 .globl _main
_main:
Leh_func_begin1:
 pushq %rbp
Llabel1:
 movq %rsp, %rbp
Llabel2:
 subq $16, %rsp
Llabel3:
 movq %rsi, %rax
 movl %edi, %ecx 
 movl %ecx, -8(%rbp)
 movq %rax, -16(%rbp) 
 xorb %al, %al 
 leaq LC(%rip), %rcx 
 movq %rcx, %rdi 
 call _printf 
 movl $0, -4(%rbp) 
 movl -4(%rbp), %eax 
 addq $16, %rsp 
 popq %rbp 
 ret
Leh_func_end1: 
 .cstring
LC: 
 .asciz "Hello World!"
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>然后链接库并生成可执行程序（译注：如果你对 C 的编译链接过程还不熟悉可以参看&nbsp;<a href="http://vdisk.weibo.com/s/G-kaugh74rPp" target="_blank">Deep C and C++</a>）。要和 Objective-C 对比的话，处理过程很相似，生成的代码依赖于是否有 Objective-C Runtime 库。当刚学 Objective-C 时，我们最先了解的(最简单的那种)是 Objective-C 中用括号包起来的代码像这样…</p>
<div>
<div id="highlighter_742222" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">[self doSomethingWithVar:var1];
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>被转换为…</p>
<div>
<div id="highlighter_249430" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">objc_msgSend(self,@selector(doSomethingWithVar:),var1);
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>但除了这些，我们就不知道之后在运行时做了什么了。</p>
<p><strong>Objective-C Runtime 是什么？</strong></p>
<p>Objective-C 的 Runtime 是一个运行时库（Runtime Library），它是一个主要使用 C 和汇编写的库，为 C 添加了面相对象的能力并创造了 Objective-C。这就是说它在类信息（Class information） 中被加载，完成所有的方法分发，方法转发，等等。Objective-C runtime 创建了所有需要的结构体，让 Objective-C 的面相对象编程变为可能。</p>
<p><strong>Objective-C Runtime 术语</strong></p>
<p>更深入之前，咱们先了解点术语。Mac 和 iPhone 开发者关心的有两个 runtime：Modern Runtime（现代的 Runtime） 和 Legacy Runtime（过时的 Runtime）。Modern Runtime：覆盖所有 64 位的 Mac OS X 应用和所有 iPhone OS 的应用。 Legacy Runtime: 覆盖其他的所有应用（所有 32 位的 Mac OS X 应用） Method 有 2 种基本类型的方法。Instance Method（实例方法）：以 ‘-’ 开始，比如 -(void)doFoo; 在对象实例上操作。Class Method（类方法）：以 ‘+’ 开始，比如 +(id)alloc。方法（Methods）和 C 的函数很像，是一组代码，执行一个小的任务，如：</p>
<div>
<div id="highlighter_916778" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">- (NSString *)movieTitle
{
    return @"Futurama: Into the Wild Green Yonder";
}
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>Selector 在 Objective-C 中 selector 只是一个 C 的数据结构，用于表示一个你想在一个对象上执行的 Objective-C 方法。在 runtime 中的定义像这样…</p>
<div>
<div id="highlighter_691900" class="syntaxhighlighter  js ">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">typedef struct objc_selector  *SEL;
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>像这样使用…</p>
<div>
<div id="highlighter_684512" class="syntaxhighlighter  js ">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">SEL aSel = @selector(movieTitle);
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>Message（消息）</p>
<div>
<div id="highlighter_956210" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">[target getMovieTitleForObject:obj];
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>消息是方括号 ‘[]’ 中的那部分，由你要向其发送消息的对象（target），你想要在上面执行的方法（method）还有你发送的参数（arguments）组成。 Objective-C 的消息和 C 函数调用是不同的。事实上，你向一个对象发送消息并不意味着它会执行它。Object（对象）会检查消息的发送者，基于这点再决定是执行一个不同的方法还是转发消息到另一个目标对象上。Class 如果你查看一个类的runtime信息，你会看到这个…</p>
<div>
<div id="highlighter_333600" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">typedef struct objc_class *Class;
typedef struct objc_object {
    Class isa;
} *id;
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>这里有几个事情。我们有一个 Objective-C 类的结构体和一个对象的结构体。objc_object 只有一个指向类的 isa 指针，就是我们说的术语 “isa pointer”（isa 指针）。这个 isa 指针是当你向对象发送消息时，Objective-C Runtime 检查一个对象并且查看它的类是什么然后开始查看它是否响应这些 selectors 所需要的一切。最后我么看到了 id 指针。默认情况下 id 指针除了告诉我们它们是 Objective-C 对象外没有其他用了。当你有一个 id 指针，然后你就可以问这个对象是什么类的，看看它是否响应一个方法，等等，然后你就可以在知道这个指针指向的是什么对象后执行更多的操作了。你可以在 LLVM/Clang 的文档中的 Block 中看到</p>
<div>
<div id="highlighter_227715" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">struct Block_literal_1 {
    void *isa; // initialized to &amp;_NSConcreteStackBlock or &amp;_NSConcreteGlobalBlock    
    int flags;    
    int reserved;     
    void (*invoke)(void *, ...); 
    struct Block_descriptor_1 { 
        unsigned long int reserved; // NULL     
        unsigned long int size;  // sizeof(struct Block_literal_1)
        // optional helper functions     
        void (*copy_helper)(void *dst, void *src);
        void (*dispose_helper)(void *src);     
    } *descriptor;    
    // imported variables
};
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>Blocks 被设计为兼容 Objective-C 的 runtime，所以他们被作为对象对待，因此他们可以响应消息，比如 -retain，-release，-copy ，等等。IMP（方法实现 Method Implementations）</p>
<div>
<div id="highlighter_311807" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">typedef id (*IMP)(id self,SEL _cmd,...);
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>IMP 是指向方法实现的函数指针，由编译器为你生成。如果你新接触 Objective-C 你现在不需要直接接触这些，但是我们将会看到，Objective-C &nbsp;runtime 将如何调用你的方法的。Objective-C Classes（Objective-C 类） 那么什么是 Objective-C 类？在 Objective-C 中的一个类实现看起来像这样：</p>
<div>
<div id="highlighter_997077" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">@interface MyClass : NSObject {
    // vars
    NSInteger counter;
}
// methods
-(void)doFoo;
@end
 
但是 runtime 不只要追踪这些
 
#if !__OBJC2__   
    Class super_class                        OBJC2_UNAVAILABLE;
    const char *name                         OBJC2_UNAVAILABLE;
    long version                             OBJC2_UNAVAILABLE;
    long info                                OBJC2_UNAVAILABLE;
    long instance_size                       OBJC2_UNAVAILABLE;    
    struct objc_ivar_list *ivars             OBJC2_UNAVAILABLE;    
    struct objc_method_list **methodLists    OBJC2_UNAVAILABLE;    
    struct objc_cache *cache                 OBJC2_UNAVAILABLE;    
    struct objc_protocol_*protocols          OBJC2_UNAVAILABLE;
#endif
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>我们可以看到，一个类有其父类的引用，它的名字，实例变量，方法，缓存还有它遵循的协议。runtime 在响应类或实例的方法时需要这些信息。</p>
<p><strong>那么 Class 定义的是对象还是对象本身？它是如何实现的</strong>&nbsp;（译注：读者需要区分 Class 和 class 是不同的，正如 Nil 和 nil 的用途是不同的）</p>
<p>是的，之前我说过 Objective-C 类也是对象，runtime 通过创建 Meta Classes 来处理这些。当你发送一个消息像这样 [NSObject alloc] 你正在向类对象发送一个消息，这个类对象需要是 MetaClass 的实例，MetaClass 也是 root meta class 的实例。当你说继承自 NSObject 时，你的类指向 NSObject 作为自己的 superclass。然而，所有的 meta class 指向 root metaclass 作为自己的 superclass。所有的 meta class 只是简单的有一个自己响应的方法列表。所以当你向一个类对象发送消息如 [NSObject alloc]，然后实际上 objc_msgSend() 会检查 meta class 看看它是否响应这个方法，如果他找到了一个方法，就在这个 Class 对象上执行（译注：class 是一个实例对象的类型，Class 是一个类（class）的类型。对于完全的 OO 来说，类也是个对象，类是类类型(MetaClass)的实例，所以类的类型描述就是 meta class）。</p>
<p><strong>为什么我们继承自苹果的类</strong></p>
<p>从你开始 Cocoa 开发时，那些教程就说如继承自 NSObject 然后开始写一些代码，你享受了很多继承自苹果的类所带来的便利。有一件事你从未意识到的是你的对象被设置为使用 Objective-C 的 runtime。当我们为我们的类的一个实例分配了内存，像这样…</p>
<div>
<div id="highlighter_754193" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">MyObject *object = [[MyObject alloc] init];
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>最先执行的消息是 +alloc。如果你<a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/Foundation/Classes/NSObject_Class/Reference/Reference.html" target="_blank">查看下文档</a>， 它说“新的实例对象的 isa 实例变量被初始化为指向一个数据结构，那个数据结构描述了这个类；其他的实例变量被初始化为 0。”所以继承自苹果的类不仅仅是继承了一些重要的属性，也继承了能在内存中轻松分配内存的能力和在内存中创建满足 runtime 期望的对象结构（设置 isa 指针指向我们的类）。</p>
<p><strong>那么 Class Cache 是什么？（objc_cache *cache）</strong></p>
<p>当 Objective-C runtime 沿着一个对象的 isa 指针检查时，它会发现一个对象实现了许多的方法。然而你可能只调用其中一小部分的方法，也没有意义每次检查时搜索这个类的分发表（dispatch table）中的所有 selector。所以这个类实现了一个缓存，当你搜索一个类的分发表，并找到合适的 selector 后，就会把它放进缓存中。所以当 objc_msgSend() 在一个类中查找 selector 时会先查找类缓存。有个理论是，当你在一个类上调用了一个消息，你很可能之后还会调用它。所以如果我们考虑到这点，就意味着当我们有个子类继承自 NSObject 叫做 MyObject 并且运行了以下的代码</p>
<div>
<div id="highlighter_773319" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">MyObject *obj = [[MyObject alloc] init]; 
 
@implementation MyObject
- (id)init {
    if(self = [super init]) {
        [self setVarA:@”blah”];    
    }
    return self;
}
@end
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>发生了以下的事：</p>
<p>(1) [MyObject alloc] 首先被执行。MyObject 没有实现 alloc 方法，所以我们不能在这个类中找到 +alloc 方法，然后沿着 superclass 指针会指向 NSObject。</p>
<p>(2) 我们询问 NSObject 是否响应 +alloc 方法，它可以。+alloc 检查消息的接收者类，是 MyObject，然后分配一块和我们的类同样大小的内存空间，并初始化它的 isa 指针指向 MyObject 类，我们现在有了一个实例对象，最终把类对象的 +alloc 方法加入 NSObject 的类缓存（class cache）中（lastly we put +alloc in NSObject's class cache for the class object ）。</p>
<p>(3) 到现在为止，我们发送了一个类消息，但是现在我们发送一个实例消息，只是简单的调用 -init 或者我们设计的初始化方法。当然，我们的类会响应这个方法，所以 -(id)init 加入到缓存中。（译注：要是 MyObject 实现了 init 方法，就会把 init 方法加入到 MyObject 的 class cache 中，要是没有实现，只是因为继承才有了这个方法，init 方法还是会加入到 NSObject 的 class cache 中）。</p>
<p>(4) 然后 self = [super init] 被调用。super 是个 magic keyword，指向对象的父类，所以我们得到了 NSObject 并调用它的的 init 方法。这样可以确保 OOP（面相对象编程） 的继承功能正常，这个方法可以正确的初始化父类的变量，之后你（在子类中）可以初始化自己的变量，如果需要可以覆盖父类的方法。在 NSObject 的例子中，没什么重要的要做，但并不总是这样。有时要做些重要的初始化。比如…</p>
<div>
<div id="highlighter_403489" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">#import  
 
@interface MyObject : NSObject {
    NSString *aString;
} 
    @property(retain) NSString *aString; 
 
@end 
 
@implementation MyObject
 
-(id)init 
{ 
    if (self = [super init]) {
        [self setAString:nil];
    }
    return self;
}
 
@synthesize aString;
 
@end
 
int main (int argc, const char * argv[]) 
{
    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
 
    id obj1 = [NSMutableArray alloc]; 
    id obj2 = [[NSMutableArray alloc] init];   
    id obj3 = [NSArray alloc]; 
    id obj4 = [[NSArray alloc] initWithObjects:@"Hello",nil];
 
    NSLog(@"obj1 class is %@",NSStringFromClass([obj1 class]));
    NSLog(@"obj2 class is %@",NSStringFromClass([obj2 class]));
    NSLog(@"obj3 class is %@",NSStringFromClass([obj3 class]));
    NSLog(@"obj4 class is %@",NSStringFromClass([obj4 class]));
 
    id obj5 = [MyObject alloc]; 
    id obj6 = [[MyObject alloc] init];   
 
    NSLog(@"obj5 class is %@",NSStringFromClass([obj5 class]));    
    NSLog(@"obj6 class is %@",NSStringFromClass([obj6 class]));   
 
    [pool drain];
    return 0;
}
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>现在如果你新接触 Cocoa ，我让你猜会会输出什么，你可能会说</p>
<div>
<div id="highlighter_958933" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">NSMutableArray
NSMutableArray 
NSArray
NSArray
MyObject
MyObject
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>但是，实际上是</p>
<div>
<div id="highlighter_643123" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">obj1 class is __NSPlaceholderArray
obj2 class is NSCFArray
obj3 class is __NSPlaceholderArray
obj4 class is NSCFArray
obj5 class is MyObject
obj6 class is MyObject
</pre>
</div>
<p>　　</p>
</div>
</div>
<p>这是因为在 Objective-C 中 +alloc 方法可能会返回某个类的对象，然后在 -init 中返回另一个类的对象。<br>（译注：感兴趣的同学可以看下这两篇文章：<a href="https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html" target="_blank">Class Clusters</a>,&nbsp;<a href="http://seanmurph.com/weblog/make-your-own-abstract-factory-class-cluster-in-objective-c/" target="_blank">Make Your Own Abstract Factory Class Cluster in Objective-C</a>, 第二篇文章需要自备小梯子。)</p>
<p><strong>那么在 objc_msgSend 中发生了什么？</strong></p>
<p>事实上在 objc_msgSend() 中发生了许多事儿。假设我们有这样的代码…</p>
<div>
<div id="highlighter_208206" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">[self printMessageWithString:@"Hello World!"];
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>它实际上会被编译器翻译为…</p>
<div>
<div id="highlighter_586833" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">objc_msgSend(self,@selector(printMessageWithString:),@"Hello World!");
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>我们沿着目标对象的 isa 指针查找，看看是否这个对象响应 @selector(printMessageWithString:) selector。假设我们在类的分发表或者缓存中找到了这个 selector，我们沿着函数指针并且执行它。这样 objcmsgSend() 就永远不会返回，它开始执行，然后沿着指向方法的指针，然后你的方法返回，这样看起来 objcmsgSend() 方法返回了。Bill Bumgarner 比我讲了更多 objc_msgSend() 的细节（<a href="http://www.friday.com/bbum/2009/12/18/objc_msgsend-part-1-the-road-map/" target="_blank">部分1</a>，<a href="http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-2-setting-the-stage/" target="_blank">部分2</a>&nbsp;和&nbsp;<a href="http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-3-the-fast-path/" target="_blank">部分3</a>）。</p>
<p>概括下他说的，并且你已经看过了 Objective-C 的 runtime 代码…</p>
<p>检查忽略的 Selector 和短路（Short Circut）—— 显然，如果我们运行在垃圾回收机制下，我们可以忽略调用 -retain, -release, 等等。</p>
<p>检查 nil 对象（target）。和其他的语言不一样的是，在 Objective-C 中向 nil 发送消息是完全合法的，并且有些原因下你会愿意这么做的。假设我们有个非 nil 的对象，然后我们继续…</p>
<p>然后我们需要在这个类上找到 IMP，所以我们先从 class cache 中找起，如果找到了就沿着指针跳到这个函数。</p>
<p>如果没有在缓存中找到 IMP，然后去查找类的分发表，如果找到了，就沿着指针跳到这个函数。</p>
<p>如果 IMP 没有在缓存和类的分发表中找到，然后我们跳到转发机制。这意味着最终你的代码被编译器转换为 C 函数。你写的方法会像这样…</p>
<div>
<div id="highlighter_728565" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">-(int)doComputeWithNum:(int)aNum
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>会被翻译为…</p>
<div>
<div id="highlighter_760874" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">int aClass_doComputeWithNum(aClass *self,SEL _cmd,int aNum)
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>Objective-C Runtime 通过调用（invoking）指向这些方法的函数指针调用你的方法（call your methods）。现在，我要说的是，你不能直接调用这些被翻译的方法，但是 Cocoa 框架提供了获得函数指针的方法…</p>
<div>
<div id="highlighter_161602" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">//declare C function pointer
int (computeNum *)(id,SEL,int);
 
//methodForSelector is COCOA &amp; not ObjC Runtime
//gets the same function pointer objc_msgSend gets
computeNum = (int (*)(id,SEL,int))[target methodForSelector:@selector(    doComputeWithNum:)]; 
 
//execute the C function pointer returned by the runtime
computeNum(obj,@selector(doComputeWithNum:),aNum);
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>通过这种方法，你可以直接访问这个函数，并且可以在运行时直接调用，甚至可以使用这个避开 runtime 的动态特性，如果你绝对需要确保一个方法被执行。Objective-C 就是用这种途径去调用你的方法的，但是使用的是 objc_msgSend()。</p>
<p><strong>Objective-C 消息转发</strong></p>
<p>在 Objective-C 中向一个不知道如何响应这个方法的对象发送消息是完全合法的（甚至可能是一种潜在的设计决定）。苹果的文档中给出的一个原因是模拟多继 承，Objective-C 不是原生支持的，或者你可能只是想抽象你的设计并且隐藏幕后处理这些消息的其他对象/类。这一点是 runtime 非常需要的。它是这样做的 1. Runtime 检查了你的类和所有父类的 class cache 和分发表，但是没找到指定的方法。2. Objective_C 的 Runtime &nbsp;会在你的类上调用 + (BOOL) resolveInstanceMethod:(SEL)aSEL。 这就给了你一个机会去提供一个方法实现并且告诉 runtime 你已经解析了这个方法，如果它开始查找，这回就会找到这个方法。你可以像这样实现…定义一个函数…</p>
<div>
<div id="highlighter_830660" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">void fooMethod(id obj, SEL _cmd)
{ 
    NSLog(@"Doing Foo");
}
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>然后你可以像这样使用 class_addMethod() 解析它…</p>
<div>
<div id="highlighter_296960" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">+(BOOL)resolveInstanceMethod:(SEL)aSEL
{
    if(aSEL == @selector(doFoo:))
    {
            class_addMethod([self class],aSEL,(IMP)fooMethod,"v@:");
            return YES;
    }
    return [super resolveInstanceMethod];
}
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>在 class_addMethod() 最后一部分的 "v@:" 是方法的返回和参数类型。你可以在 Runtime Guide 的 Type Encoding 章节看到完整介绍。 3. Runtime 然后调用 – (id)forwardingTargetForSelector:(SEL)aSelector。这样做是为了给你一次机会（因为我们不能解析这个方法 （参见上面的 #2））引导 Objective-C runtime 到另一个可以响应这个消息的对象上，在花费昂贵的处理过程调用 &nbsp;– (void)forwardInvocation:(NSInvocation *)anInvocation 之前调用这个方法也是更好的。你可以像这样实现</p>
<div>
<div id="highlighter_916821" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">- (id)forwardingTargetForSelector:(SEL)aSelector
{
    if(aSelector == @selector(mysteriousMethod:))
    {        
        return alternateObject;
    }
    return [super forwardingTargetForSelector:aSelector];
}
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>显然你不想从这个方法直接返回 self，否则可能会产生一个死循环。 4. Runtime 最后一次会尝试在目标对象上调用 – (void)forwardInvocation:(NSInvocation *)anInvocation。如果你从没看过 NSInvocation，它是 Objective-C 消息的对象形式。一旦你有了一个 NSInvocation 你可以改变这个消息的一切，包括目标对象，selector 和参数。所以你可以这样做… &nbsp;</p>
<div>
<div id="highlighter_691024" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">-(void)forwardInvocation:(NSInvocation *)invocation
{  
    SEL invSEL = invocation.selector;    
    if([altObject respondsToSelector:invSEL]) {        
        [invocation invokeWithTarget:altObject];    
    } else {        
        [self doesNotRecognizeSelector:invSEL];    
    }
}
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>如果你继承自 NSObject，默认它的 – (void)forwardInvocation:(NSInvocation *)anInvocation 实现只是简单的调用 -doesNotRecognizeSelector:，你可以在最后一次机会里覆盖这个方法去做一些事情。（译注：对这块内容有兴趣的同学可以参见：<a href="http://www.cnblogs.com/biosli/p/NSObjectinherit2.html" target="_blank">http://www.cnblogs.com/biosli/p/NSObjectinherit2.html</a>）</p>
<p><strong>Non Fragile ivars（Modern Runtime）</strong>（非脆弱的 ivar）</p>
<p>我们最近在 Modern Runtime 里得到的是 Non Fragile ivars 的概念。当编译你的类时，编译器生成了一个 ivar 布局，显示了在你的类中从哪可以访问你的 ivars，获取指向你的对象的指针，查看 ivar 与对象起始字节的偏移关系，和获取读入的变量类型的总共字节大小等一些底层的细节。所以你的 ivar 布局可能看起来像这样，左侧的数字是字节偏移量。</p>
<p><img title="1412746845222783.png" src="http://cn.cocos2d-x.org/uploads/20141008/1412746845222783.png" alt="2014031602.png"></p>
<p>我们有了 NSObject 的 ivar 布局，然后我们继承自 NSObject 去扩展它并且添加了我们自己的 ivars。在苹果发布更新前这都工作的很好，但是 Mac OS X 10.6 发布后，就成了这样</p>
<p><img title="1412746883224078.png" src="http://cn.cocos2d-x.org/uploads/20141008/1412746883224078.png" alt="2014031603.png"></p>
<p>你的自定义对象被剔除了因为我们有了一个重叠的父类。唯一可以防止这个的办法是如果苹果坚持之前的布局，如果他们这么做了，那么他们的框架就不能改进，因 为他们的 ivar 布局被冻住了。在 fragile ivar 下你不得不重新编译你继承自苹果类的类来恢复兼容性。所以在非 fragile ivar 时，会发生生么？</p>
<p><img title="1412746910778150.png" src="http://cn.cocos2d-x.org/uploads/20141008/1412746910778150.png" alt="2014031604.png"></p>
<p>使用非 fragile ivars 时，编译器生成和 fragile ivars 相同的 ivar 布局。然而当 runtime 检测到一个重叠的超类时，它调整你在这个类中新增的 ivar 的偏移量，这样在子类中新增加的那部分就显示出来了。</p>
<p><strong>Objective-C 关联对象</strong></p>
<p>最近在 Mac OS X 10.6 雪豹 中新引入了关联引用。Objective-C 不能动态的添加一些属性到对象上，和其他的一些原生支持这点的语言不一样。所以之前你都不得不努力为未来要增加的变量预留好空间。在 Mac OS X 10.6 中，Objective-C 的 Runtime 已经原生的支持这个功能了。如果我们想向一个已有的类添加变量，看起来像这样…</p>
<div>
<div id="highlighter_606081" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">#import  //Cocoa
#include  //objc runtime api’s 
 
@interface NSView (CustomAdditions)
@property(retain) NSImage *customImage;
@end 
 
@implementation NSView (CustomAdditions) 
 
static char img_key; //has a unique address (identifier)
 
- (NSImage *)customImage
{    
    return objc_getAssociatedObject(self,&amp;img_key);
}
 
- (void)setCustomImage:(NSImage *)image
{    
    objc_setAssociatedObject(self, &amp;img_key,image, OBJC_ASSOCIATION_RETAIN);
} 
 
@end
 
objc_setAssociatedObject() 的选项，你可以在 runtime.h 文件中找到。
 
/* Associated Object support. */ 
 
/* objc_setAssociatedObject() options */
enum {    
    OBJC_ASSOCIATION_ASSIGN = 0,    
    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,    
    OBJC_ASSOCIATION_COPY_NONATOMIC = 3,    
    OBJC_ASSOCIATION_RETAIN = 01401,    
    OBJC_ASSOCIATION_COPY = 01403
};
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>这些和 @property 语法中的选项意思一样。</p>
<p>混和的 vTable Dispatch</p>
<p>如果你看过 modern runtime 的代码，你会发现这个（在&nbsp;<a href="http://opensource.apple.com/source/objc4/objc4-437/runtime/objc-runtime-new.m" target="_blank">objc-runtime-new.m</a>&nbsp;中）</p>
<div>
<div id="highlighter_98597" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">/***********************************************************************
* vtable dispatch
* 
* Every class gets a vtable pointer. The vtable is an array of IMPs.
* The selectors represented in the vtable are the same for all classes
*   (i.e. no class has a bigger or smaller vtable).
* Each vtable index has an associated trampoline which dispatches to 
*   the IMP at that index for the receiver class's vtable (after 
*   checking for NULL). Dispatch fixup uses these trampolines instead 
*   of objc_msgSend.
* Fragility: The vtable size and list of selectors is chosen at launch 
*   time. No compiler-generated code depends on any particular vtable 
*   configuration, or even the use of vtable dispatch at all.
* Memory size: If a class's vtable is identical to its superclass's 
*   (i.e. the class overrides none of the vtable selectors), then 
*   the class points directly to its superclass's vtable. This means 
*   selectors to be included in the vtable should be chosen so they are 
*   (1) frequently called, but (2) not too frequently overridden. In 
*   particular, -dealloc is a bad choice.
* Forwarding: If a class doesn't implement some vtable selector, that 
*   selector's IMP is set to objc_msgSend in that class's vtable.
* +initialize: Each class keeps the default vtable (which always 
*   redirects to objc_msgSend) until its +initialize is completed.
*   Otherwise, the first message to a class could be a vtable dispatch, 
*   and the vtable trampoline doesn't include +initialize checking.
* Changes: Categories, addMethod, and setImplementation all force vtable 
*   reconstruction for the class and all of its subclasses, if the 
*   vtable selectors are affected.
**********************************************************************/
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>背后的思想是，runtime 尝试在这个 vtable 中存储最近被调用的 selectors，这样就可以提升你的应用的速度，因为它使用了比 objc_msgSend 更少的指令（fewer instructions）。vtable 中保存 16 个全局最经常调用的 selectors，事实上顺着代码往下看你可以发现垃圾回收和非垃圾回收类型程序的默认 selectors ：</p>
<div>
<div id="highlighter_717899" class="syntaxhighlighter  js">
<div class="cnblogs_Highlighter">
<pre class="brush:objc;gutter:true;">static const char * const defaultVtable[] = {
    "allocWithZone:", 
    "alloc", 
    "class", 
    "self", 
    "isKindOfClass:", 
    "respondsToSelector:", 
    "isFlipped", 
    "length", 
    "objectForKey:", 
    "count", 
    "objectAtIndex:", 
    "isEqualToString:", 
    "isEqual:", 
    "retain", 
    "release", 
    "autorelease", 
};
static const char * const defaultVtableGC[] = {
    "allocWithZone:", 
    "alloc", 
    "class", 
    "self", 
    "isKindOfClass:", 
    "respondsToSelector:", 
    "isFlipped", 
    "length", 
    "objectForKey:", 
    "count", 
    "objectAtIndex:", 
    "isEqualToString:", 
    "isEqual:", 
    "hash", 
    "addObject:", 
    "countByEnumeratingWithState:objects:count:", 
};
</pre>
</div>
<p>　　</p>
<br>
</div>

</div>
<p>你可以在调试时从堆栈追踪里找到其中的method，可以像objc_msgSend()一样将它们用于调试。</p>
<p><strong>总结</strong></p>
<p>Objective-C Runtime是非常优秀的作品，它为支撑我们的Cocoa/Objective-C app以及众多的优秀特性做了大量工作。你可以查看苹果官方文档来继续深入了解（<a href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html" target="_blank">Objective-C Runtime Programming Guide</a>、<a href="http://developer.apple.com/mac/library/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html" target="_blank">Objective-C Runtime Reference</a>）。</p>
<p>&nbsp;</p>
<p>原文：http://www.cocoachina.com/ios/20141008/9844.html</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2016-08-30 23:22</span>&nbsp;
<a href="https://www.cnblogs.com/xiaopin/">肖品</a>&nbsp;
阅读(<span id="post_view_count">390</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5824111" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(5824111);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 65882, cb_blogApp = 'xiaopin', cb_blogUserGuid = '1879a4b6-b8d4-de11-ba8f-001cf0cd104b';
    var cb_entryId = 5824111, cb_entryCreatedDate = '2016-08-30 23:22', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 肖品
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvF3TdoC1ihPnb376bP0j17Jeey9P2iKmjXoKECVOnYHKPQVapDtv6VfOJ7kO_9zeO91dN9B9-FyUbb4AFW90GyIzLh4GFYZaCa8cTw-AOIUX9-cS6zaln59t2A1aomkX4" />
</body>
</html>
