<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="一、前言 计算机最喜欢的数字就是 0 和 1，在 CPU 的世界中，它只认识这两个数字，即使是强大的操作系统，也都是由 0 和 1 组成的。 作为一名软件开发者，入门学习的内容可能就是认识这 2 个既" />
    <meta property="og:description" content="一、前言 计算机最喜欢的数字就是 0 和 1，在 CPU 的世界中，它只认识这两个数字，即使是强大的操作系统，也都是由 0 和 1 组成的。 作为一名软件开发者，入门学习的内容可能就是认识这 2 个既" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>关于二进制表示和补码计算的来龙去脉，入门看了秒懂 - sewain - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/en_summergarden/bundle-en_summergarden.min.css?v=gu9D42SICRpSF20TsqaDDdlzi8l6wrVo-xl5ayWWci4" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/en_summergarden/bundle-en_summergarden-mobile.min.css?v=p9oHKzdjHOpDQRECqFt19AEtTuyvjreyaezSID0mxbI" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sewain/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sewain/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sewain/wlwmanifest.xml" />
    <script>
        var currentBlogId = 487004;
        var currentBlogApp = 'sewain';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'En_summerGarden';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-04-08 09:40';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="no-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/sewain/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="Return Home" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sewain/">sewain</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		

<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
CnBlogs</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/sewain/">
Home</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
New Post</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/sewain">
Contact</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
Admin</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/sewain/rss/">
Subscription</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/sewain/rss/">
    <img src="/skins/en_summergarden/images/xml.gif" alt="订阅" />
</a></li>
</ul>



		<div class="blogStats">
			
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sewain/p/14630791.html">
    <span>关于二进制表示和补码计算的来龙去脉，入门看了秒懂</span>
    



</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#一、前言">一、前言</a></li><li><a href="#二、从十进制到二进制">二、从十进制到二进制</a><ul><li><a href="#1-十进制">1. 十进制</a></li><li><a href="#2-二进制">2. 二进制</a></li><li><a href="#3-扩展到十六进制">3. 扩展到十六进制</a></li><li><a href="#4-扩展到任意进制">4. 扩展到任意进制</a></li></ul></li><li><a href="#三、从十进制加法到二进制加法">三、从十进制加法到二进制加法</a><ul><li><a href="#1-十进制加法">1. 十进制加法</a></li><li><a href="#2-二进制加法">2. 二进制加法</a></li><li><a href="#3-十六进制加法">3. 十六进制加法</a></li></ul></li><li><a href="#四、把负数计算转换成正数计算">四、把负数计算转换成正数计算</a><ul><li><a href="#1-原码">1. 原码</a></li><li><a href="#2-把负数计算变成正数计算">2. 把负数计算变成正数计算</a></li><li><a href="#3-新问题：如何表示0？">3. 新问题：如何表示0？</a></li><li><a href="#4-补码的计算">4. 补码的计算</a></li></ul></li><li><a href="#五、总结">五、总结</a></li></ul></div><p></p>
<h2 id="一、前言">一、前言</h2>
<p>计算机最喜欢的数字就是<font color="orange"> 0 和 1</font>，在 CPU 的世界中，它只认识这两个数字，即使是强大的<font color="orange">操作系统</font>，也都是由 0 和 1 组成的。</p>
<p>作为一名软件开发者，入门学习的内容可能就是认识这 2 个既简单、又强大的数字。但是大部分人，对于<font color="orange">二进制、二进制计算、原码、反码以及补码</font>的认识，仍处于机械的<font color="orange">强制记忆阶段</font>。尤其是对一些编码和计算，仍然处于模糊的认识阶段，例如：</p>
<blockquote>
<ol>
<li>
<p>CPU 是如何表示负数的？</p>
</li>
<li>
<p>为什么补码可以用来表示负数？</p>
</li>
<li>
<p>一个 8 位的二进制数，最小值为什么是 -128，而不是 -127？</p>
</li>
<li>
<p>CPU 中的加法器，为什么可以连同符号位一起运算？</p>
</li>
</ol>
</blockquote>
<p>这篇文章我们就来聊聊这个最最基础的内容，帮助你来理解<font color="orange">二进制计算</font>的相关内容，看完这篇文章之后，不仅知其然，更能知其所以然！</p>
<p>PS: 这里有点高调了，最终的所以然部分，应该涉及到<font color="orange">数学证明</font>这一层次了，本文并不会涉及到求证过程。</p>
<h2 id="二、从十进制到二进制">二、从十进制到二进制</h2>
<h4 id="1-十进制">1. 十进制</h4>
<p>作为数学计算能力强大的中国，10 以内的加减法，应该是在幼儿园阶段就完成了。如果你不属于这个范围，说明你上的是假幼儿园。</p>
<p>我们来快速复习一下关于<font color="orange">十进制</font>运算的一些基本知识:</p>
<blockquote>
<ol>
<li>
<p>每一个数位上包括的数字为 0 到 9；</p>
</li>
<li>
<p>每一个数位上的数，是它右侧数位的 10 倍；</p>
</li>
<li>
<p>两个数相加时，相同数位上的数相加之和如果大于等于 10，就向前进 1 位，即：满十进一；</p>
</li>
</ol>
</blockquote>
<p>具体来看就是：</p>
<blockquote>
<ol>
<li>
<p>从右数第一个位数(个位)上的数字代表多少个 1；</p>
</li>
<li>
<p>从右数第二个位数(十位)上的数字代表多少个 10；</p>
</li>
<li>
<p>从右数第三个位数(百位)上的数字代表多少个 100；</p>
</li>
<li>
<p>从右数第四个位数(千位)上的数字代表多少个 1000；</p>
</li>
</ol>
</blockquote>
<p>十进制的数，可以使用后缀字母<font color="orange"> D </font>来表示，也可以省略。例如：十进制的 1234 这个数字，个位上的数是 4， 十位上的数是 3， 百位上的数是 2，千位上的数是 1（一般是从<font color="orange">最右侧</font>的个位说起），每一个数位上的数比它右侧大十倍。<br>
如下图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093857293-1515731603.png" alt="" loading="lazy"></p>
<p>十进制数据，也称作<font color="orange">基于十的表示法</font>。</p>
<h4 id="2-二进制">2. 二进制</h4>
<p>那么对于<font color="orange">二进制</font>呢？直接<font color="orange">套用</font>上面<font color="orange">十进制</font>的概念，然后<font color="orange">把 10 换成 2 </font>即可(目前先忽略符号位)：</p>
<blockquote>
<ol>
<li>
<p>每一个数位上包括的数字为 0 和 1；</p>
</li>
<li>
<p>每一个数位上的数，是它右侧数位的 2 倍；</p>
</li>
<li>
<p>两个数相加时，相同数位上的数相加之和如果大于等于 2，就向前进 1 位，即：满二进一；</p>
</li>
</ol>
</blockquote>
<p>具体来看就是：</p>
<blockquote>
<ol>
<li>
<p>从右数第一个位数上的数字代表多少个 1；</p>
</li>
<li>
<p>从右数第二个位数上的数字代表多少个 2；</p>
</li>
<li>
<p>从右数第三个位数上的数字代表多少个 4；</p>
</li>
<li>
<p>从右数第四个位数上的数字代表多少个 8；</p>
</li>
</ol>
</blockquote>
<p>记住几个重点：二进制数中只包含<font color="orange"> 0 和 1 </font>两个数字，在相加时<font color="orange">满二进一</font>。</p>
<p>在十进制中，每一个数位我们给它进行了专门的命名(个位、十位、百位...)，但是二进制没有类似的命名。</p>
<p>二进制的数，使用后缀字母<font color="orange"> B </font>来表示，例如：二进制的 1111B 这个数字，用图来表示权重如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093857909-269826984.png" alt="" loading="lazy"></p>
<p>换算成<font color="orange">十进制</font>数就是 15(1 * 8 + 1 * 4 + 1 * 2 + 1 * 1 = 15)。</p>
<p>在二进制中，每一位称为一个<font color="orange">比特(bit)</font>，如果用<font color="orange"> 8 个 bit </font>来表示一个二进制数，<font color="orange">最小值</font>是 0000_00000，<font color="orange">最大值</font>是 1111_1111；</p>
<p>如果用<font color="orange"> 16 个 bit </font>来表示一个二进制数，<font color="orange">最小值</font>是 0000_0000_0000_0000，<font color="orange">最大值</font>是 1111_1111_1111_1111。(为了便于观察，每 4 个 bit 之间，加上了分隔符)</p>
<p>在早期的计算机中，8 位的处理器很常见，于是就给它一个专门的名字：<font color="orange">字节(Byte)</font>。16 位的二进制数就是 2 个字节，也称作：<font color="orange">字(Word)</font>。</p>
<h4 id="3-扩展到十六进制">3. 扩展到十六进制</h4>
<p>原理还是相同的：直接<font color="orange">把十进制中的 10 换成 16 </font>即可：</p>
<blockquote>
<ol>
<li>
<p>每一个数位上包括的数字为 0 到 9，A 到 F；</p>
</li>
<li>
<p>每一个数位上的数，是它右侧数位的 16 倍；</p>
</li>
<li>
<p>两个数相加时，相同数位上的数相加之和如果大于等于 16，就向前进 1 位，即：满十六进一；</p>
</li>
</ol>
</blockquote>
<p>具体来看就是：</p>
<blockquote>
<ol>
<li>
<p>从右数第一个位数上的数字代表多少个 1；</p>
</li>
<li>
<p>从右数第二个位数上的数字代表多少个 16；</p>
</li>
<li>
<p>从右数第三个位数上的数字代表多少个 256；</p>
</li>
<li>
<p>从右数第四个位数上的数字代表多少个 4096；</p>
</li>
</ol>
</blockquote>
<p>在十六进制中，需要<font color="orange">十六个</font>数字来表示<font color="orange"> 0 到 15 </font>这些数字，0 到 9 比较好处理，但是从<font color="orange"> 10 到 15</font>，我们就需要找一些记号来表示，于是人们就想到用<font color="orange"> A,B,C,D,E,F </font>这几个字母来分别表示 10 到 15 这个 6 个数字。</p>
<p>十六进制数据，使用后缀字母<font color="orange"> H </font>来表示，有些场合也可以使用<font color="orange">前缀 0x </font>来表示，本质上没有区别。例如：十六进制数字 1A2BH（或者写作 0x1A2B），每一个数位上的权重如图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093858446-2142815270.png" alt="" loading="lazy"></p>
<p>换算成<font color="orange">十进制</font>数就是 6699(1 * 4096 + 10 * 256 + 2 * 16 + 11 * 1 = 6699)。</p>
<h4 id="4-扩展到任意进制">4. 扩展到任意进制</h4>
<p>原理仍然相同：直接把<font color="orange">十进制中的 10 换成目标进制</font>，例如<font color="orange"> 5 进制</font>：</p>
<blockquote>
<ol>
<li>
<p>每一个数位上包括的数字为 0 到 4；</p>
</li>
<li>
<p>每一个数位上的数，是它右侧数位的 5 倍；</p>
</li>
<li>
<p>两个数相加时，相同数位上的数相加之和如果大于等于 5，就向前进 1 位，即：满五进一；</p>
</li>
</ol>
</blockquote>
<p>具体来看就是：</p>
<blockquote>
<ol>
<li>
<p>从右数第一个位数上的数字代表多少个 1；</p>
</li>
<li>
<p>从右数第二个位数上的数字代表多少个 5；</p>
</li>
<li>
<p>从右数第三个位数上的数字代表多少个 25；</p>
</li>
<li>
<p>从右数第四个位数上的数字代表多少个 125；</p>
</li>
</ol>
</blockquote>
<p>再看一个图加深印象：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093858920-35748610.png" alt="" loading="lazy"></p>
<h2 id="三、从十进制加法到二进制加法">三、从十进制加法到二进制加法</h2>
<h4 id="1-十进制加法">1. 十进制加法</h4>
<p>这个就不必多说了，规则只有 2 条：</p>
<blockquote>
<ol>
<li>
<p>两个数，相同数位上的数字进行相加；</p>
</li>
<li>
<p>每一个数位上的相加结果，满十进一；</p>
</li>
</ol>
</blockquote>
<p>例如：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093859295-2064886014.png" alt="" loading="lazy"></p>
<p><font color="orange">个位上</font>：4 + 8，结果是 12，但是十进制中没有 12 这个数字，因此向左侧的高位<font color="orange">进1</font>，个位就剩下：12 - 10 = 2。</p>
<p><font color="orange">十位上</font>：7 + 2，再加上进位 1，结果是 10，但是十进制中没有 10 这个数字，因此向左侧的高位<font color="orange">进1</font>，十位变成：10 - 10 = 0。</p>
<p><font color="orange">百位上</font>：1 加上进位 1，结果是 2。</p>
<h4 id="2-二进制加法">2. 二进制加法</h4>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093859562-605283261.png" alt="" loading="lazy"></p>
<p><font color="orange">第 0 位</font>：0 + 0 结果为 0；</p>
<p><font color="orange">第 1 位</font>：1 + 0 结果为 1；</p>
<p><font color="orange">第 2 位</font>：1 + 1 结果为 2，但是二进制中<font color="orange">没有 2 </font>这个数字，因此需要向左侧的高位<font color="orange">进 1</font>，于是第 2 位上就剩下 2 - 2 = 0。</p>
<p><font color="orange">第 3 位</font>：1 + 1 等于 2，再加上进位 1，结果就是 3，但是二进制中<font color="orange">没有 3 </font>这个数字，因此需要向左侧的高位<font color="orange">进 1</font>，于是第 3 位上就剩下 3 - 2 = 1。</p>
<p>第 4，5，6，7位计算均是如此。</p>
<h4 id="3-十六进制加法">3. 十六进制加法</h4>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093859919-387742221.png" alt="" loading="lazy"></p>
<p><font color="orange">第 0 位</font>：E + C，结果为 26，但是十六进制中<font color="orange">没有 26 </font>这个数字，因此需要向左侧的高位<font color="orange">进 1</font>，于是第 0 位就剩下 26 - 16 = A。</p>
<p><font color="orange">第 1 位</font>：A + 1 等于 B，再加上进位 1，结果就是 C，十六机制中<font color="orange">有这个数字</font>。</p>
<h2 id="四、把负数计算转换成正数计算">四、把负数计算转换成正数计算</h2>
<h4 id="1-原码">1. 原码</h4>
<p><font color="orange">原码(true form)</font>是一种计算机中对数字的二进制<font color="orange">定点表示方法</font>。原码表示法在数值前面增加了一位<font color="orange">符号位</font>（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。</p>
<p>例如，用 8 个 bit (8 位二进制数)来表示一个数，+11 的原码为 0000_1011，-11 的原码就是 1000_1011。</p>
<h4 id="2-把负数计算变成正数计算">2. 把负数计算变成正数计算</h4>
<p>我们都知道，CPU 中有<font color="orange">加法器</font>，好像从来没有听说过<font color="orange">“减法器”</font>。例如计算 5 + 8，转换成二进制来计算：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093900269-1298894960.png" alt="" loading="lazy"></p>
<p>再来计算一下减法：5 - 8，对于 CPU 来说，只会计算 5 + 8， 但是<font color="orange">不会</font>计算 5 - 8。</p>
<p>但是可以转换一下思路，把减法变成加法<font color="orange"> 5 + (-8)</font>，这样不就可以计算了吗？于是计算机先驱者就发明了反码：</p>
<blockquote>
<ol>
<li>
<p>正数的反码：保持原码不变；</p>
</li>
<li>
<p>负数的反码：原码中符号位不变，其余全部取反(-8 的原码是 1000_1000，反码就是：1111_0111)；</p>
</li>
</ol>
</blockquote>
<p>于是 5 + (-8)的计算过程就是：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093900624-1147936454.png" alt="" loading="lazy"></p>
<p>此时，<font color="orange">就完美解决了减法问题</font>，那么乘法(多加几次)、除法(多减几次)问题也就跟着解决了。至于如何从数学的角度来证明，那就要问那些数学家了！</p>
<h4 id="3-新问题：如何表示0？">3. 新问题：如何表示0？</h4>
<p>我们现在可以小结一下<font color="orange">反码</font>的表示范围(记住：第一位是符号位)：</p>
<blockquote>
<ol>
<li>
<p>正数的表示范围：0000_0000 ~ 0111_1111，也就是十进制的 +0 ~ +127 这 128 个数；</p>
</li>
<li>
<p>负数的表示范围：1000_0000 ~ 1111_1111，也就是十进制的 -127 ~ -0 这 128 个数；</p>
</li>
</ol>
</blockquote>
<p>有没有发现问题：怎么存在<font color="orange"> +0 和 -0 </font>这两个数？而且他们的编码还不一样：+0 对应 0000_0000，-0 对应 1111_1111。</p>
<p>CPU 虽然就是一个傻瓜，让它干啥就干啥，但是 CPU 最不能容忍的就是<font color="orange">不确定性</font>！我们都知道<font color="orange"> +0 == -0 == 0</font>，它们是<font color="orange">同一个</font>数字，但是在二进制编码中，居然有两个编码来表示同一个数。</p>
<p>伟大的计算机先驱者又做了这样一个<font color="orange">决定</font>：<font color="orange">正数保持不变，负数整体减一</font>。</p>
<p>也就是说：<font color="orange">符号位不变，值整体加1</font>，如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093901056-1327349287.png" alt="" loading="lazy"></p>
<p>这样就<font color="orange">成功解决了 -0、+0 的问题！</font></p>
<p>现在 一个 8 位的二进制就可以表示的范围是：<font color="orange">-128 ~ 127</font>，并且中间没有任何重复、遗漏的数字。</p>
<p>既然每一个二进制表示的值<font color="orange">发生了变化</font>，那么继续称之为<font color="orange">反码</font>就<font color="orange">不准确</font>了，此时给它们一个新的称呼：<font color="orange">补码</font>，也就是说：上图就变成了这样：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093901793-1668461989.png" alt="" loading="lazy"></p>
<p><font color="orange">小结一下补码的定义：</font></p>
<blockquote>
<ol>
<li>
<p>正数的补码：保持原码不变；</p>
</li>
<li>
<p>负数的补码：原码中符号位不变，其余先全部取反，然后再加1(例如：-8 的原码是 1000_1000，补码就是 1111_1000)；</p>
</li>
</ol>
</blockquote>
<p>此时，我们仅仅是解决了二级制编码的表示问题，那么：<font color="orange">补码能直接参与运算吗？运算结果会出现什么问题？</font></p>
<h4 id="4-补码的计算">4. 补码的计算</h4>
<p>我们先看一下这个问题：假设现在时间是<font color="orange"> 1 </font>点整，但是你的手表进水了，它显示的是<font color="orange"> 3 </font>点整，现在你怎么把时间调整到 1 点的位置？</p>
<blockquote>
<p>方法1：把时针逆时针拨动 2 个小时(3 - 2 = 1)；</p>
<p>方法2：把时针顺时针拨动 9 个小时到 12 点，然后再拨动 1 个小时(3 + 10 = 1)；</p>
</blockquote>
<p>对于时钟表盘来说，每<font color="orange"> 12 </font>个小时为一圈，可以认为：-2 == 10，-1 = 11， -3 = 9，同样的：-2 == 10， -2 == 22， -2 == 34，...</p>
<p>可以看到规律是：-2、10、22、34 这些数字对<font color="orange"> 12 取模</font>都得到同一个数(取正数)，在数学上，两个整数除以<font color="orange">“同一个整数”</font>，若得相同余数，则这两个整数<font color="orange">同余</font>。</p>
<p>表盘中的<font color="orange"> 12 </font>就是这个<font color="orange">“同一个整数”</font>，可以看到这是一个可<font color="orange">“溢出”</font>的系统，-2、10、22、34 这几个数在表盘上表示的是一样的数，所以说<font color="orange">这几个整数同余</font>。</p>
<p>也就是说：<font color="orange">在计算的时候，可以用 10、22、34 这几个数字来替换 -2，替换之后的计算结果是相同的</font>。</p>
<p>那么对于一个<font color="orange"> 8 位 的二进制数</font>来说，最多只有<font color="orange"> 8 位</font>，在计算过程中，如果最高位产生了进位，就会被丢弃，所以它也是一个可<font color="orange">“溢出”</font>的系统。那么这里的<font color="orange">“同一个整数”</font>是多少呢？</p>
<p>从前面的内容中可以看到，使用<font color="orange">补码</font>表示的 8 位二进制数表示的范围是<font color="orange"> -128 ~ 127</font>，一共是<font color="orange"> 256 个数</font>，所以如果对 256 取模，得到相同的余数，那么这些数就是<font color="orange">同余数</font>。</p>
<p>例如：-2 和 254 对 256 取模，得到相同的余数，因此它俩就是<font color="orange">同余数</font>，那么在计算的时候，就可以<font color="orange">用 254 来代替 -2</font>。</p>
<p>那么我们通过计算 3 + (-2) 来验证一下。</p>
<p><font color="orange">(1) 利用同余数来计算</font></p>
<p>3 + (-2) == 3 + 254 = 257</p>
<p>257 超过了最大的表示范围，所以<font color="orange">溢出</font>，结果就是 257 对 256 取模，结果为 1。</p>
<p><font color="orange">(2) 直接用补码来计算</font></p>
<p>3 的<font color="orange">补码</font>是 0000_0011，-2 的<font color="orange">补码</font>是 1111_1110，在计算的时候，把<font color="orange">符号位</font>也参与运算：</p>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093902434-2062861725.png" alt="" loading="lazy"></p>
<p>结果<font color="orange">也是 1</font>，也就是说：</p>
<p><font color="orange">在二进制计算中，使用补码来计算，“天然”就满足了“同余定理”。</font></p>
<p>细心的读者可能已经发现了：-2 的二进制补码表示，与 254 的二进制自然表示，它们的形式是一样的！</p>
<p><font color="orange">这种“天然”性，是巧合？还是计算机前辈的设计结果？！</font></p>
<h2 id="五、总结">五、总结</h2>
<p>这篇文章，我们探讨了计算机系统的软件基石：<font color="orange">二进制系统</font>，主要的目的是帮助你理解二进制的表示、计算方式。</p>
<p>希望你看完之后能够<font color="orange">豁然开朗</font>！如果对您的理解有帮助的话，请<font color="orange">转发</font>给身边的技术小伙伴，共同成长！</p>
<p>谢谢！</p>
<hr>
<center>
好文章，<font color="Darkorange">要转发</font>；越分享，越幸运！    
<p><font color="Darkorange">星标公众号</font>，能更快找到我！<br>
<br></p>
<hr>
<p><img src="https://img2020.cnblogs.com/blog/1440498/202104/1440498-20210408093902994-660525667.png" alt="" loading="lazy"></p>
</center>
<hr>
<br>
<center><font color="orange" size="4">推荐阅读</font></center>
<br>
<p><a href="https://mp.weixin.qq.com/s/TwDiDmApmsIVSIFh2h1osQ" target="_blank">1. C语言指针-从底层原理到花式技巧，用图文和代码帮你讲解透彻</a><br>
<a href="https://mp.weixin.qq.com/s/oY2pF5ilk8UCq09022Tt6w" target="_blank">2. 原来gdb的底层调试原理这么简单</a><br>
<a href="https://mp.weixin.qq.com/s/xOdwQQHIjEobe4jR_2gDRQ" target="_blank">3. 一步步分析-如何用C实现面向对象编程</a><br>
<a href="https://mp.weixin.qq.com/s/OwfnCQo8s8E1KzuVKKca1g" target="_blank">4. 都说软件架构要分层、分模块，具体应该怎么做(一)</a><br>
<a href="https://mp.weixin.qq.com/s/MRrDKhEGyNEbrZy2DqzjtQ" target="_blank">5. 都说软件架构要分层、分模块，具体应该怎么做(二)</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2021-04-08 09:40</span>&nbsp;
<a href="https://www.cnblogs.com/sewain/">sewain</a>&nbsp;
Views(<span id="post_view_count">289</span>)&nbsp;
Comments(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14630791" rel="nofollow">Edit</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14630791);return false;">收藏</a></div>
	</div>
	
	
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 487004, cb_blogApp = 'sewain', cb_blogUserGuid = '7ce9079e-488c-4635-622f-08d5e7b1771b';
    var cb_entryId = 14630791, cb_entryCreatedDate = '2021-04-08 09:40', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 sewain
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjuvgwIIWY4f07-qhQBwnrfpQeh3OJWy1muT1ixqsXbJg-tayNnYakijVyZvuYotBHlXhAEBZaLPY0vyHfSRB0Iu7maX9lMQrI-_y9AiXGwbiaZB3sErc7VlwcjkxoIQg5Y" />
</body>
</html>
