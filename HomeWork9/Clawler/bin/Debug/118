<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="本文主要讲讲 CSS 非常新的一个特性，CSS @property，它的出现，极大地增强的 CSS 的能力！根据MDN -- CSS Property[1]，@property CSS at-rule" />
    <meta property="og:description" content="本文主要讲讲 CSS 非常新的一个特性，CSS @property，它的出现，极大地增强的 CSS 的能力！根据MDN -- CSS Property[1]，@property CSS at-rule" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>CSS @property，让不可能变可能 - 苍青浪 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=BgguPR_JbmA1HKLJOLqLtHq5pt8a1UlO6ibCA_xgwdI" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=gcYNuAuJkNMICFERxhZCtKHGitYmBYNTxm9W97H2O2g" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/cangqinglang/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/cangqinglang/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/cangqinglang/wlwmanifest.xml" />
    <script>
        var currentBlogId = 405579;
        var currentBlogApp = 'cangqinglang';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'coffee';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-11 08:40';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/cangqinglang/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/cangqinglang/">苍青浪</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/cangqinglang/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%8B%8D%E9%9D%92%E6%B5%AA">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/cangqinglang/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/cangqinglang/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cangqinglang/p/14757248.html">
    <span>CSS @property，让不可能变可能</span>
    



</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-tool="mdnice编辑器">本文主要讲讲 CSS 非常新的一个特性，CSS @property，它的出现，极大地增强的 CSS 的能力！根据MDN -- CSS Property<sup>[1]</sup>，@property CSS at-rule 是 CSS Houdini API 的一部分, 它允许开发者显式地定义他们的 CSS 自定义属性，允许进行属性类型检查、设定默认值以及定义该自定义属性是否可以被继承。</p>
<blockquote data-tool="mdnice编辑器">
<p><code>CSS Houdini</code>又是什么呢，<code>CSS Houdini</code>开放 CSS 的底层 API 给开发者，使得开发者可以通过这套接口自行扩展 CSS，并提供相应的工具允许开发者介入浏览器渲染引擎的样式和布局流程中，使开发人员可以编写浏览器可以解析的 CSS 代码，从而创建新的 CSS 功能。当然，它不是本文的重点，不过多描述。</p>
</blockquote>
<p data-tool="mdnice编辑器"><code>CSS Property</code>如何使用呢？我们将通过一些简单的例子快速上手，并且着重介绍它在 CSS 动画中起到的关键性的作用，对 CSS 动画带来的巨大提升。</p>
<h2 data-tool="mdnice编辑器">示例</h2>
<p data-tool="mdnice编辑器">正常而言，我们定义和使用一个 CSS 自定义属性的方法是这样的：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">:root {  
 --whiteColor: #fff;  
} 
p {  
  color: (--whiteColor);  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">而有了<code>@property</code>规则之后，我们还可以像下述代码这样去定义个 CSS 自定义属性：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">  
@property --property-name </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">  
  syntax</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> '&lt;color&gt;'</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">  
  inherits</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> false</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">  
  initial-value</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> #fff</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>  
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
p </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">  
  color</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> var(--property-name)</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>  
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span>  
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>  </pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">简单解读下：</p>
<ul class="list-paddingleft-2" data-tool="mdnice编辑器">
<li><code>@property --property-name</code>中的<code>--property-name</code>就是自定义属性的名称，定义后可在 CSS 中通过<code>var(--property-name)</code>进行引用</li>
<li>syntax：该自定义属性的语法规则，也可以理解为表示定义的自定义属性的类型</li>
<li>inherits：是否允许继承</li>
<li>initial-value：初始值</li>
</ul>
<p data-tool="mdnice编辑器">其中，<code>@property</code>规则中的 syntax 和 inherits 描述符是必需的。当然，在 JavaScript 内定义的写法也很简单，顺便一提：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">  
CSS.registerProperty({  
  name: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">--property-name</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,  
  syntax: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">&lt;color&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,  
  inherits: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">false</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">,  
  initialValue: </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">#c0ffee</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">  
});  
</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>  </pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<h2 data-tool="mdnice编辑器">支持的 syntax 语法类型</h2>
<p data-tool="mdnice编辑器"><code>syntax</code>支持的语法类型非常丰富，基本涵盖了所有你能想到的类型。</p>
<ul class="list-paddingleft-2" data-tool="mdnice编辑器">
<li>length</li>
<li>number</li>
<li>percentage</li>
<li>length-percentage</li>
<li>color</li>
<li>image</li>
<li>url</li>
<li>integer</li>
<li>angle</li>
<li>time</li>
<li>resolution</li>
<li>transform-list</li>
<li>transform-function</li>
<li>custom-ident (a custom identifier string)</li>
</ul>
<h3 data-tool="mdnice编辑器">syntax 中的<code>+</code>、<code>#</code>、<code>|</code>符号</h3>
<p data-tool="mdnice编辑器">定义的 CSS<code>@property</code>变量的 syntax 语法接受一些特殊的类型定义。</p>
<ul class="list-paddingleft-2" data-tool="mdnice编辑器">
<li><code>syntax: '&lt;color#&gt;'</code>：接受逗号分隔的颜色值列表</li>
<li><code>syntax: '&lt;length+&gt;'</code>：接受以空格分隔的长度值列表</li>
<li><code>syntax: '&lt;length | length+&gt;'</code>：接受单个长度或者以空格分隔的长度值列表</li>
</ul>
<hr data-tool="mdnice编辑器">
<p data-tool="mdnice编辑器">OK，铺垫了这么多，那么为什么要使用这么麻烦的语法定义 CSS 自定义属性呢？CSS Houdini 定义的自定义变量的优势在哪里？下面我们一一娓娓道来。</p>
<h2 data-tool="mdnice编辑器">使用<code>color</code>syntax 语法类型作用于渐变</h2>
<p data-tool="mdnice编辑器">我们来看这样一个例子，我们有这样一个渐变的图案：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">  
div {  
 background: linear-gradient(45deg, #fff, #000);  
}</span></pre>
</div>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203315907-950417321.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">我们改造下上述代码，改为使用 CSS 自定义属性：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">:root {  
  --colorA: #fff;  
  --colorB: #000;  
}  
div {  
 background: linear-gradient(45deg, var(--colorA), var(--colorB));  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">得到的还是同样的一个渐变图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203331778-1225606708.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器">我们再加上一个过渡效果：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">:root {  
  --colorA: #fff;  
  --colorB: #000;  
}  
div {  
  background: linear-gradient(45deg, var(--colorA), var(--colorB));  
  transition: 1s background;  
  &amp;:hover {  
    --colorA: yellowgreen;  
    --colorB: deeppink;  
  }  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">看看鼠标 Hover 的时候，会发生什么：</p>
<p data-tool="mdnice编辑器"><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203413456-51541534.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器">虽然我们设定了 1s 的过渡动画<code>transition: 1s background</code>，但是很可惜，CSS 是不支持背景渐变色的直接过渡变化的，我们得到的只是两帧之间的之间变化。</p>
<h3 data-tool="mdnice编辑器">使用 CSS @property 进行改造</h3>
<p data-tool="mdnice编辑器">OK，接下来我们就是有本文的主角，使用 Houdini API 中的 CSS 自定义属性替换原本的 CSS 自定义属性。简单进行改造一下，使用<code>color</code>syntax 语法类型：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@property --houdini-colorA {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">color</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: #fff;  
}  
@property --houdini-colorB {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">color</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: #000;  
}  
.property {  
  background: linear-gradient(45deg, var(--houdini-colorA), var(--houdini-colorB));  
  transition: 1s --houdini-colorA, 1s --houdini-colorB;   
  &amp;:hover {  
    --houdini-colorA: yellowgreen;  
    --houdini-colorB: deeppink;  
  }  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">我们使用了<code>@property</code>语法，定义了两个 CSS Houdini 自定义变量<code>--houdini-colorA</code>和<code>--houdini-colorB</code>，在 hover &nbsp;变化的时候，改变这两个颜色。需要关注的是，我们设定的过渡语句<code>transition: 1s --houdini-colorA, 1s --houdini-colorB</code>，在这里，<strong>我们是针对 CSS Houdini 自定义变量设定过渡，而不是针对<code>background</code>设定过渡动画</strong>，再看看这次的效果：</p>
<p data-tool="mdnice编辑器"><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203447870-1370551080.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器">Wow，成功了，渐变色的变化从两帧的逐帧动画变成了补间动画，实现了从一个渐变色过渡到另外一个渐变色的效果！而这，都得益于 CSS Houdini 自定义变量的强大能力！<br>CodePen Demo -- CSS Houdini 自定义变量实现渐变色过渡动画<sup>[2]</sup></p>
<h3 data-tool="mdnice编辑器">使用 CSS @property 实现渐变背景色过渡动画</h3>
<p data-tool="mdnice编辑器">在上述的 DEMO 中，我们利用了 CSS Houdini 自定义变量，将原本定义在<code>background</code>的过渡效果嫁接到了<code>color</code>之上，而 CSS 是支持一个颜色变换到另外一个颜色的，这样，我们巧妙的实现了渐变背景色的过渡动画。在之前我们有讨论过在 CSS 中有多少种方式可以实现渐变背景色过渡动画 --巧妙地制作背景色渐变动画！<sup>[3]</sup>，到今天，我们又多了一种实现的方式！</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@property --colorA {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">color</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: fuchsia;  
}  
@property --colorC {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">color</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: #f79188;  
}  
@property --colorF {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">color</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: red;  
}  
div {  
  background: linear-gradient(45deg,  
    var(--colorA),  
    var(--colorC),  
    var(--colorF));  
  animation: change 10s infinite linear;  
}
@keyframes change {  
  20% {  
    --colorA: red;  
    --colorC: #a93ee0;  
    --colorF: fuchsia;  
  }  
  40% {  
    --colorA: #ff3c41;  
    --colorC: #e228a0;  
    --colorF: #2e4c96;  
  }  
  60% {  
    --colorA: orange;  
    --colorC: green;  
    --colorF: teal;  
  }  
  80% {  
    --colorA: #ae63e4;  
    --colorC: #0ebeff;  
    --colorF: #efc371;  
  }  
}  </span></pre>
</div>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203525818-117286801.gif" alt="" loading="lazy"></p>
<pre data-tool="mdnice编辑器"></pre>
<p data-tool="mdnice编辑器">完整的代码可以戳这里：<br>CodePen Demo -- CSS Houdini 自定义变量实现渐变色过渡动画2<sup>[4]</sup></p>
<h2 data-tool="mdnice编辑器">conic-gradient 配合 CSS @property 实现饼图动画</h2>
<p data-tool="mdnice编辑器">OK，上面我们演示了<code>syntax</code>为<code>color</code>语法类型的情况。在文章一开头，我们还列举了非常多的<code>syntax</code>类型。下面我们尝试下其他的类型，使用<code>percentage</code>百分比类型或者<code>angle</code>角度类型，实现一个饼图的 hover 动画。如果我们还是使用传统的写法，利用角向渐变实现不同角度的饼图：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">div</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">  
.normal {  
  width: 200px;  
  height: 200px;  
  border-radius: 50%;  
  background: conic-gradient(yellowgreen, yellowgreen 25%, transparent 25%, transparent 100%);   
  transition: background 300ms;  

  &amp;:hover {  
    background: conic-gradient(yellowgreen, yellowgreen 60%, transparent 60.1%, transparent 100%);   
  }  
}  </span></pre>
</div>
<p data-tool="mdnice编辑器">将会得到这样一种效果，由于<code>conic-gradient</code>也是不支持过渡动画的，得到的是一帧向另外一帧的直接变化：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203609058-928043956.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器"><br>好，使用 CSS Houdini 自定义变量改造一下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@property --per {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 25%;  
}
div {  
  background: conic-gradient(yellowgreen, yellowgreen var(--per), transparent var(--per), transparent 100%);   
  transition: --per 300ms linear;
  &amp;:hover {  
      --per: 60%;  
  }  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">看看改造后的效果：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203630856-304042795.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器">CodePode Demo -- conic-gradient 配合 CSS \@property 实现饼图动画<sup>[5]</sup>以往使用纯 CSS 非常复杂才能实现的效果，如果可以轻松的达成，不得不感慨<code>CSS @property</code>强大的能力！</p>
<h3 data-tool="mdnice编辑器">syntax 的 | 符号</h3>
<p data-tool="mdnice编辑器">顺便演示一下定义 Houdini 自定义变量时 syntax 的一些稍微复杂点的用法。在<code>conic-gradient</code>中，我们可以使用百分比也可以使用角度作为关键字，上述的 DEMO 也可以改造成这样：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@property --per {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span> | <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">angle</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 25%;  
}  </span></pre>
</div>
<p>&nbsp;</p>
<pre data-tool="mdnice编辑器"><code><br>...&nbsp;&nbsp;<br></code></pre>
<p data-tool="mdnice编辑器">表示，我们的自定义属性即可以是一个百分比值，也可以是一个角度值。除了<code>|</code>符号外，还有<code>+</code>和<code>#</code>号分别表示接受以空格分隔、和以逗号分隔的属性，感兴趣的可以自行尝试。</p>
<h2 data-tool="mdnice编辑器">使用<code>length</code>类型作用于一些长度变化</h2>
<p data-tool="mdnice编辑器">掌握了上述的技巧，我们就可以利用 Houdini 自定义变量的这个能力，去填补修复以前无法直接过渡动画的一些效果了。过去，我们想实现这样一个文字下划线的 Hover 效果：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">p {  
  text-underline-offset: 1px;  
  text-decoration-line: underline;  
  text-decoration-color: #000;  
  transition: all .3s;  
  &amp;:hover {  
    text-decoration-color: orange;  
    text-underline-offset: 10px;  
    color: orange;  
  }  
}</span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">因为<code>text-underline-offset</code>不支持过渡动画，得到的结果如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203743176-1320680550.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器"><br>使用 Houdini 自定义变量改造，化腐朽为神奇：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@property --offset {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">length</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 0;  
}  
div {  
  text-underline-offset: var(--offset, 1px);  
  text-decoration: underline;  
  transition: --offset 400ms, text-decoration-color 400ms;  
  &amp;:hover {  
    --offset: 10px;  
    color: orange;  
    text-decoration-color: orange;  
  }  
}</span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">可以得到丝滑的过渡效果：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203806587-511076289.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器"><br>CodePen Demo - Underlines hover transition\(Chrome solution with Houdini\)<sup>[6]</sup></p>
<h2 data-tool="mdnice编辑器">实战一下，使用 CSS @property 配合 background 实现屏保动画</h2>
<p data-tool="mdnice编辑器">嗯，因为 CSS @property 的存在，让以前需要非常多 CSS 代码的工作，一下子变得简单了起来。我们尝试利用<code>CSS @property</code>配合 background，简单的实现一个屏保动画。我们利用<code>background</code>可以简单的得到这样一个图形，代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">html, body {  
  width: 100%;  
  height: 100%;  
}  
body {  
  background-image:  
    radial-gradient(  
      circle at 86% 7%,  
      rgba(40, 40, 40, 0.04) 0%,  
      rgba(40, 40, 40, 0.04) 50%,  
      rgba(200, 200, 200, 0.04) 50%,  
      rgba(200, 200, 200, 0.04) 100%  
    ),  
    radial-gradient(  
      circle at 15% 16%,  
      rgba(99, 99, 99, 0.04) 0%,  
      rgba(99, 99, 99, 0.04) 50%,  
      rgba(45, 45, 45, 0.04) 50%,  
      rgba(45, 45, 45, 0.04) 100%  
    ),  
    radial-gradient(  
      circle at 75% 99%,  
      rgba(243, 243, 243, 0.04) 0%,  
      rgba(243, 243, 243, 0.04) 50%,  
      rgba(37, 37, 37, 0.04) 50%,  
      rgba(37, 37, 37, 0.04) 100%  
    ),  
    linear-gradient(rgb(34, 222, 237), rgb(135, 89, 215));  
}  </span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">效果如下，还算可以的静态背景图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203832180-1803240619.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p data-tool="mdnice编辑器"><br>在往常，我们想让它<strong>动起来</strong>，其实是需要费一定的功夫的，而现在，通过<code>CSS @property</code>，对我们希望进行动画的一些元素细节进行改造，可以得到非常不错的动画效果：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">body,  
html {  
  width: 100%;  
  height: 100%;  
} 
@property --perA {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 75%;  
}
@property --perB {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 99%;  
}
@property --perC {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 15%;  
}
@property --perD {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 16%;  
}
@property --perE {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">percentage</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 86%;  
}
@property --angle {  
  syntax: '</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">angle</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 0, 1)">';  
  inherits: false;  
  initial-value: 0deg;  
}
body {  
  background-image:   
    radial-gradient(  
      circle at var(--perE) 7%,  
      rgba(40, 40, 40, 0.04) 0%,  
      rgba(40, 40, 40, 0.04) 50%,  
      rgba(200, 200, 200, 0.04) 50%,  
      rgba(200, 200, 200, 0.04) 100%  
    ),  
    radial-gradient(  
      circle at var(--perC) var(--perD),  
      rgba(99, 99, 99, 0.04) 0%,  
      rgba(99, 99, 99, 0.04) 50%,  
      rgba(45, 45, 45, 0.04) 50%,  
      rgba(45, 45, 45, 0.04) 100%  
    ),  
    radial-gradient(  
      circle at var(--perA) var(--perB),  
      rgba(243, 243, 243, 0.04) 0%,  
      rgba(243, 243, 243, 0.04) 50%,  
      rgba(37, 37, 37, 0.04) 50%,  
      rgba(37, 37, 37, 0.04) 100%  
    ),  
    linear-gradient(var(--angle), rgb(34, 222, 237), rgb(135, 89, 215));  
  animation: move 30s infinite alternate linear;  
}
@keyframes move {  
  100% {  
    --perA: 85%;  
    --perB: 49%;  
    --perC: 45%;  
    --perD: 39%;  
    --perE: 70%;  
    --angle: 360deg;  
  }  
}</span></pre>
</div>
<pre data-tool="mdnice编辑器"><code>&nbsp;</code></pre>
<p data-tool="mdnice编辑器">效果如下（因为 Gif 上传大小限制，加快了速率，截取了其中一部分，简单做个示意）:</p>
<p data-tool="mdnice编辑器"><img src="https://img2020.cnblogs.com/blog/1313648/202105/1313648-20210511203912503-1024060221.gif" alt="" loading="lazy"></p>
<p data-tool="mdnice编辑器">整体的效果还是挺不错的，完整的 Demo 你可以戳这里：<br>CodePen Demo -- CSS \@property PureCSS Wrapper<sup>[7]</sup></p>
<h2 data-tool="mdnice编辑器">参考文献：</h2>
<ul class="list-paddingleft-2" data-tool="mdnice编辑器">
<li>CSS Properties and Values API Level 1<sup>[8]</sup></li>

</ul>
<h2 data-tool="mdnice编辑器">最后</h2>
<p data-tool="mdnice编辑器">好了，本文到此结束，介绍了 CSS Houdini API 中的 CSS @property 部分，并且利用它实现了一些以往无法简单实现的动画效果，希望对你有帮助 :)更多精彩 CSS 技术文章汇总在我的Github -- iCSS<sup>[9]</sup>，持续更新，欢迎点个 star 订阅收藏。如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</p>
<h3 data-tool="mdnice编辑器">参考资料</h3>
<p>
[1]&nbsp;MDN -- CSS Property:&nbsp;<em>https://developer.mozilla.org/zh-CN/docs/Web/CSS/@property</em></p>
<p>
[2]&nbsp;CodePen Demo:&nbsp;<em>https://codepen.io/Chokcoco/pen/eYgyWLB?editors=1100</em></p>
<p>
[3]&nbsp;巧妙地制作背景色渐变动画:&nbsp;<em>https://github.com/chokcoco/iCSS/issues/10</em></p>
<p>
[4]&nbsp;CodePen Demo:&nbsp;<em>https://codepen.io/Chokcoco/pen/Bapmzbd</em></p>
<p>
[5]&nbsp;undefined:&nbsp;<em>undefined</em></p>
<p>
[6]&nbsp;CodePode Demo:&nbsp;<em>https://codepen.io/Chokcoco/pen/QWdqMvo</em></p>
<p>
[7]&nbsp;CodePen Demo -- CSS @property PureCSS Wrapper:&nbsp;<em>https://codepen.io/Chokcoco/pen/VwPxMBP</em></p>
<p>
[8]&nbsp;CSS Properties and Values API Level 1:&nbsp;<em>https://drafts.css-houdini.org/css-properties-values-api-1/#at-property-rule</em></p>
<p>
[9]&nbsp;Github -- iCSS:&nbsp;<em>https://github.com/chokcoco/iCSS</em></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2021-05-11 20:40</span>&nbsp;
<a href="https://www.cnblogs.com/cangqinglang/">苍青浪</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14757248" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14757248);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 405579, cb_blogApp = 'cangqinglang', cb_blogUserGuid = '733ba083-4228-41d5-19b8-08d54dbac325';
    var cb_entryId = 14757248, cb_entryCreatedDate = '2021-05-11 20:40', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 苍青浪
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvYzFSpQ7VK-89ciz0d2RwdnZrcNWMFOB-kArd-8EMvd_Szdil6QlYmMNQzFim_70UQmaduME-h_E8RWJWe0sQZ1BUGIXJHjDoUHqIXqs5fNTH1A17B0fjQXOcMnB8b02A" />
</body>
</html>
