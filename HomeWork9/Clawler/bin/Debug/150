<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="所谓“飞控”，其实是重力加速度计和陀螺仪的组合，因为多用于控制飞行器的平衡（无人机、遥控飞机）。有同学会问，这货为什么会有六轴呢？咱们常见的不是X、Y、Z三轴吗？重力加速度有三轴，陀螺仪也有三轴，那我" />
    <meta property="og:description" content="所谓“飞控”，其实是重力加速度计和陀螺仪的组合，因为多用于控制飞行器的平衡（无人机、遥控飞机）。有同学会问，这货为什么会有六轴呢？咱们常见的不是X、Y、Z三轴吗？重力加速度有三轴，陀螺仪也有三轴，那我" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【.NET 与树莓派】六轴飞控传感器（MPU 6050） - 东邪独孤 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/moonlightink/bundle-moonlightink.min.css?v=iVE30sZ6vb6blzqPWbGs2kM432fxmh8k3P9XllAp48s" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/moonlightink/bundle-moonlightink-mobile.min.css?v=axcwoS9UbqWFSKj9O2YcPP0sVreDAEIZDpcqOVKt8M4" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tcjiaan/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tcjiaan/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tcjiaan/wlwmanifest.xml" />
    <script>
        var currentBlogId = 113198;
        var currentBlogApp = 'tcjiaan';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'MoonlightInk';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-11 05:12';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/tcjiaan/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tcjiaan/">老周</a>
</h1>
<h2>成于天性，行于自然。</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tcjiaan/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%9C%E9%82%AA%E7%8B%AC%E5%AD%A4">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/tcjiaan/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tcjiaan/p/14751964.html">
    <span>【.NET 与树莓派】六轴飞控传感器（MPU 6050）</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>所谓“飞控”，其实是重力加速度计和陀螺仪的组合，因为多用于控制飞行器的平衡（无人机、遥控飞机）。有同学会问，这货为什么会有六轴呢？咱们常见的不是X、Y、Z三轴吗？重力加速度有三轴，陀螺仪也有三轴，那我问你，两个加起来多少轴？</p>
<p>贴片常见的有 MPU-6000、MPU-6050、MPU-9250 。MPU 9250 是九轴传感器。哟，吓死阿伟了，怎么变成了九轴了？它弄了个磁场感应嘛。</p>
<p>老周在淘宝“琉璃厂”淘到的模块是正点原子的 MPU 6050。万能法则——找最便宜的入，别相信那些叫你买贵的，你不妨把便宜的和贵各买一个对比看看，最后你会一刻拍案惊奇地发现——两个一模一样。网上卖东西，有些店就是瞎喊价格的。他们真不会做生意，想想网购这玩意儿，我完全可以货比万家的，一样的商品，当然谁便宜买谁了。反正过程一样，都是坐和等待 + 三通一达。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510163338886-1524140531.png" width="290" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;MPU 6050 使用的是 IIC/i2c 通信协议。也就是说你很熟悉了，除了供电两根线，就是数据线 SDA 和时钟线 SCL。</p>
<p>&nbsp;</p>
<p>MPU 6050 的操作方式是读写寄存器，输出的模拟量是 16 位有符号整数。2 的 16 次方有65536个数值，包含0，无符号整数是0 - 65535，但有符号就不同了，因为最高位用作符号位，故范围是 -32768 ~ +32767。这个范围也就是MPU 6050的输出分辨率。</p>
<p>咱们在使用时要注意，这货有多种量程设置，不同量程下输出结果的精度不同。下面老周具体扯一下。</p>
<p>先看重力加速度，可配置的量程有：</p>
<p><span style="background-color: rgba(255, 255, 153, 1); color: rgba(51, 51, 51, 1)">1、±2g：g 就是我们以前上物理课时的老熟人了——重力加速度。故，此量程可测量两倍 g 的加速度，包含负值。</span></p>
<p><span style="background-color: rgba(255, 255, 153, 1); color: rgba(51, 51, 51, 1)">2、±4g：原理同上，量程为四倍的 g 的加速度，包含正负值。</span></p>
<p><span style="background-color: rgba(255, 255, 153, 1); color: rgba(51, 51, 51, 1)">3、±8g：八倍于 g ，含正负值。</span></p>
<p><span style="background-color: rgba(255, 255, 153, 1); color: rgba(51, 51, 51, 1)">4、±16g：十六倍的g，含正负值。</span></p>
<p>前面提到了，模块输出的是16位有符号整数，那么</p>
<p>若量程为 <span style="color: rgba(255, 0, 0, 1)">+/- 2g</span>，正负值加起来，倍数是4，16位有65536个数值，所以，65536 ÷ 4 = 16384。也就是说，每一倍的 g 可以划分为 16384 等分来描述，精度是最高的。同样的计算方法，4g、8g、16g的分值也能算出来：</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510165736102-370531915.png" height="96" loading="lazy"></p>
<p>&nbsp;&nbsp;你可以看看，如果要测量 ±16 个g的量程，那么每个g只能划分为2048个等分了。可见：<strong><span style="color: rgba(51, 51, 153, 1)">量程越小，精度越高；量程越大，精度越低</span></strong>。</p>
<p><span style="background-color: rgba(255, 0, 0, 1); color: rgba(255, 255, 0, 1)">* 由于正负两边是对轴的，也可以只算一边，即 +/-2g =&gt; 32768 / 2 = 16384。&nbsp;</span></p>
<p>&nbsp;</p>
<p>陀螺仪是测量某个轴上的旋转速度，与加速度一样，角速度也可以设置量程。</p>
<p>±250° / s：速度每秒旋转 250 度。同样，65536 ÷ (250 * 2) = 131，因为速度有正负值，所以250要乘以2。其他几个值也是这样算。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510170615503-109947673.png" height="96" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>配置重力加速度的量程的寄存器地址为 0x1C，一个字节，各二进制位的参数如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510171202067-2137117302.png" height="53" loading="lazy"></p>
<p>&nbsp;</p>
<p>这里咱们只关心 bit3 和 bit4 即可，bit5 到 bit7是用来模块自测的，不必管他。AFS_SEL 两个二进制位可以产生四个值（00、01、10、11），这样就和上面咱们提到的量程对应上了。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510171447436-1956988379.png" height="100" loading="lazy"></p>
<p>&nbsp;</p>
<p>默认是0，即 +/-2g，向寄存器写入 b0000_.0000。如果要+/-4g的量程，就向寄存器写入 b0000_1000。</p>
<p>-----------------------------------------------------------------</p>
<p>配置陀螺仪量程的寄存器地址是 0x1B。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510171822787-145028699.png" height="62" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;和上一个寄存器一样，咱们只关心 FS_SEL 两个二进制位即可，也是四个值，分别与前文中提到的角速度量程一一对应。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510172050445-44648671.png" height="100" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>接下来，要关注的是电源管理寄存器，地址为 0x6B。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210510172240818-245313544.png" height="65" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;这里最关键的是 bit6，也就是参数 SLEEP。MPU6050 刚通电时，会默认进入休眠状态（可能别的厂家不是这样），这时候，SLEEP 位上的值是 1，要唤醒模块，就要<strong><span style="color: rgba(51, 51, 153, 1)">把这个二进制位改为 0</span></strong>。由于正点原子这个模块上面还有个温度传感器，所以，如果 TEMP_DIS 位为0，表示使用温度传感器，从寄存器 0x41 和 0x42 可以读到温度值；咱们使用这个模块主要是读重力加速度和角速度，所以要禁用温度计的话就把该位设置为 1。</p>
<p>&nbsp;</p>
<p>接下来是核心，如何读加速度和角速度的值。一个值是16位有符号整数，两个字节，因此需要两个寄存器；而加速度有三个轴的值，总共需要六个寄存器来存放。这六个寄存器是连续的，地址从&nbsp; 0x3B 到 0x40。依次读出来的是：X轴的高位字节 &gt; X轴的低位字节 &gt; Y轴的高位字节 &gt; Y轴的低位字节 &gt; Z轴的高位字节 &gt; Z轴的低位字节。读取时是高位字节先出，低位字节后出。</p>
<p>读取角速度也一样，需要连续的六个寄存器—— 从 0x43 到 0x48。X、Y、Z三轴供六个字节，也是高字节在前，低字节在后。</p>
<p>&nbsp;</p>
<p>连接的时候，VCC接树莓派 5V，GND接树莓派GND，至于另外两根线，这里老周顺便提一下，如何让 Pi 4 开启多路 i2c。咱们通过 raspi-config 工具（或直接改 config.txt 文件）所使用的是默认的总线——i2c-1，也就是 GPIO2 和 GPIO3 引脚。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511123758604-217508510.png" width="400" loading="lazy"></p>
<p>&nbsp;</p>
<p>i2c-0 是给专用扩展板通信的，官方文档建议咱们不要使用（引脚 GPIO0 和 GPIO1），在树莓派上电时会检测 i2c-0 总线，因此这一路是留给 EEPROM 专属。</p>
<p>但不用担心，除了 i2c-0、i2c-1 外，还有四路我们可以选：i2c-3、i2c-4、i2c-5和i2c-6。根据文档说明，只有 BCM 2711 才能开启多路 i2c 接口。在树莓派上执行一下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">cat</span> /proc/cpuinfo</pre>
</div>
<p>然后，你会看到让人兴奋的一幕。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511124540120-80819617.png" height="90" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;而 Raspberry Pi 4B 规格文档上的描述也印证了，4 代是支持开启多路 i2c 接口的（可用多个总线）。</p>
<p>为什么要启用其他 i2c 总线？可以有以下理由：</p>
<p>1、相同的器件挂到同一个总线上，有的模块可以设置地址，但有的不可以。为了不冲突，可以考虑地址相同的模块连到不同的总线上；</p>
<p>2、GPIO2 或 GPIO3 用不了。当然，这里不是指针脚坏了，而是说另作他用。比如，你要给树莓派弄一个开机按钮；又或者，你在 5V 和 GND上接了风扇，有的散热风扇两根线是并在一起的，而且用的是插电脑主板的那种端子，既没法选其他引脚又占用空间，把GPIO2和GPIO3的位置都挡住了。</p>
<p>哦，上面提到了为树莓派添加开机按钮的事，咱们先聊正题，待会儿正题扯完了，老周再补充。</p>
<p>树莓派4B可用 GPIO 有 28 个，也就是说，GPIO 的 BCM 码最多只到 27，什么 40、45 号接口的就别做梦了。依据文档，咱们一起来瞧瞧这可用的四路 i2c 总线的参数。</p>
<p>1、i2c-3：有两组引脚可用。GPIO2、GPIO3 与 i2c-1 是重叠的；所以可以选另一个组——GPIO4 和 GPIO5。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511160539241-1531139143.png" height="350" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2、i2c-4：也是有两组引脚可选。第一组是 GPIO6 和 GPIO7；第二组是 GPIO8 和GPIO9。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511161249954-1815740126.png" height="325" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>3、i2c-5：也是有两组引脚可用。第一组 GPIO10 和 GPIO11；第二组 GPIO12 和 GPIO13。如果使用 PWM 的话，注意 12、13 的冲突。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511161746428-1843396438.png" height="313" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>4、i2c-6：第一组引脚 GPIO0 和 GPIO1，这个前面提到过，保留分配给专用扩展板，建议不使用；第二组是 GPIO23 和 GPIO23。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511162134247-1849387835.png" height="280" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>这里老周选用了 i2c-4，所以总线 Bus id 是 4，引脚是 6 和 7，打开 /boot/config.txt 文件，加入以下配置：</p>
<div class="cnblogs_code">
<pre>dtoverlay=i2c4,pins_6_7</pre>
</div>
<p>这个配置与 raspi-config 中对 i2c 的配置是独立的，也就是说，就算你禁用了 i2c，就像这样：</p>
<div class="cnblogs_code">
<pre>dtparam=i2c_arm=off</pre>
</div>
<p>i2c-4 仍然可以正常工作，所以，i2c-3 到 i2c-6 的配置不受默认 i2c 的启用状态影响，只要我配置有 i2c-4，哪怕禁用了i2c接口也能使用。</p>
<p>&nbsp;</p>
<p>好了，剩下的工作就是写代码。先上MPU6050类。代码我整个贴了。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Mpu6050 : IDisposable
    {
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 默认从机地址
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> DEFAULT_ADDR = <span style="color: rgba(128, 0, 128, 1)">0x68</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 重力加速度
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">float</span> G = <span style="color: rgba(128, 0, 128, 1)">9.8f</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 寄存器列表
        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 电源管理，用于唤醒模块</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> REG_POWER_MGR = <span style="color: rgba(128, 0, 128, 1)">0x6b</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置加速度的量程</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> REG_ACCEL_CONFIG = <span style="color: rgba(128, 0, 128, 1)">0x1c</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置角速度的量程</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> REG_GYRO_CONFIG = <span style="color: rgba(128, 0, 128, 1)">0x1b</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取重力加速度</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> REG_ACCL_MS_BASE = <span style="color: rgba(128, 0, 128, 1)">0x3b</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 读取角速度</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> REG_GYRO_MS_BASE = <span style="color: rgba(128, 0, 128, 1)">0x43</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    
        <span style="color: rgba(0, 0, 255, 1)">private</span> I2cDevice _device = <span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">;
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 构造函数</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> Mpu6050(<span style="color: rgba(0, 0, 255, 1)">int</span> i2cBusid, <span style="color: rgba(0, 0, 255, 1)">int</span> devAddress =<span style="color: rgba(0, 0, 0, 1)"> DEFAULT_ADDR)
        {
            I2cConnectionSettings cs </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> I2cConnectionSettings(i2cBusid, devAddress);
            _device </span>=<span style="color: rgba(0, 0, 0, 1)"> I2cDevice.Create(cs);
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Dispose() =&gt; _device?<span style="color: rgba(0, 0, 0, 1)">.Dispose();

        </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 私有方法
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> WriteReg(<span style="color: rgba(0, 0, 255, 1)">byte</span> reg, <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)"> val)
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; data = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">]
            {
                reg,
                val
            };
            _device.Write(data);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> ReadReg(<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)"> reg)
        {
            _device.WriteByte(reg);
            </span><span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">int</span> i =<span style="color: rgba(128, 0, 128, 1)">0</span>; i&lt;<span style="color: rgba(128, 0, 128, 1)">13</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
            {
                System.Threading.Thread.SpinWait(</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
        }
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ReadBytes(<span style="color: rgba(0, 0, 255, 1)">byte</span> reg, Span&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> data)
        {
            _device.WriteByte(reg);
            </span><span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">int</span> x = <span style="color: rgba(128, 0, 128, 1)">0</span>; x &lt; data.Length; x++<span style="color: rgba(0, 0, 0, 1)">)
            {
                data[x] </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            _device.Read(data);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 唤醒
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> WakeUp()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 或者写入 0x08（禁用温度计输出）</span>
            WriteReg(REG_POWER_MGR, <span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 进入休眠
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Sleep()
        {
            WriteReg(REG_POWER_MGR, </span><span style="color: rgba(128, 0, 128, 1)">0x40</span><span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 重力加速度的量程
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> AcclRange AccelerRange
        {
            </span><span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> v =<span style="color: rgba(0, 0, 0, 1)"> ReadReg(REG_ACCEL_CONFIG);
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 由于测量范围的配置在第4、5位，所以读出来的值要右移三位</span>
                <span style="color: rgba(0, 0, 255, 1)">return</span> (AcclRange)(<span style="color: rgba(0, 0, 255, 1)">byte</span>)((v &gt;&gt; <span style="color: rgba(128, 0, 128, 1)">3</span>) &amp; <span style="color: rgba(128, 0, 128, 1)">0x03</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> x = (<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">)value;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 存入时要左移三位</span>
                WriteReg(REG_ACCEL_CONFIG, (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(x &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">));
            }
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 陀螺仪的量程
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> GyroRange GyroRange
        {
            </span><span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> v =<span style="color: rgba(0, 0, 0, 1)"> ReadReg(REG_GYRO_CONFIG);
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 同样，要右移三位</span>
                <span style="color: rgba(0, 0, 255, 1)">return</span> (GyroRange)(<span style="color: rgba(0, 0, 255, 1)">byte</span>)((v &gt;&gt; <span style="color: rgba(128, 0, 128, 1)">3</span>) &amp; <span style="color: rgba(128, 0, 128, 1)">0x03</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> c = (<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">)value;
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 左移三位</span>
                WriteReg(REG_GYRO_CONFIG,  (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(c &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">));
            }
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 读取加速度值
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> (<span style="color: rgba(0, 0, 255, 1)">float</span> ax, <span style="color: rgba(0, 0, 255, 1)">float</span> ay, <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> az) GetAccelerometer()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 可以以 0x3b 为基址，批量读取
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 因为地址是连续的</span>
            Span&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buffer = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">];
            ReadBytes(REG_ACCL_MS_BASE, buffer);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合成读数</span>
            <span style="color: rgba(0, 0, 255, 1)">short</span> x =<span style="color: rgba(0, 0, 0, 1)"> BinaryPrimitives.ReadInt16BigEndian(buffer);
            </span><span style="color: rgba(0, 0, 255, 1)">short</span> y = BinaryPrimitives.ReadInt16BigEndian(buffer[<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">..]);
            </span><span style="color: rgba(0, 0, 255, 1)">short</span> z = BinaryPrimitives.ReadInt16BigEndian(buffer[<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">..]);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换倍数</span>
            <span style="color: rgba(0, 0, 255, 1)">float</span> fac = AccelerRange <span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">
            {
                AcclRange.x2g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">2.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x4g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">4.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x8g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">8.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x16g      </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">16.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                _                   </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">
            };
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> x,
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> y,
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> z
            );
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 读取陀螺仪数据
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> (<span style="color: rgba(0, 0, 255, 1)">float</span> gx, <span style="color: rgba(0, 0, 255, 1)">float</span> gy, <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> gz) GetGyroscope()
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buffer = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">];
            ReadBytes(REG_GYRO_MS_BASE, buffer);
            </span><span style="color: rgba(0, 0, 255, 1)">short</span> x =<span style="color: rgba(0, 0, 0, 1)"> BinaryPrimitives.ReadInt16BigEndian(buffer[..]);
            </span><span style="color: rgba(0, 0, 255, 1)">short</span> y = BinaryPrimitives.ReadInt16BigEndian(buffer[<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">..]);
            </span><span style="color: rgba(0, 0, 255, 1)">short</span> z = BinaryPrimitives.ReadInt16BigEndian(buffer[<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">..]);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换倍数</span>
            <span style="color: rgba(0, 0, 255, 1)">float</span> rf = GyroRange <span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">
            {
                GyroRange.x250dps       </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> 250f,
                GyroRange.x500dps       </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> 500f,
                GyroRange.x1000dps      </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> 1000f,
                GyroRange.x2000dps      </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> 2000f,
                _                       </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> 0f
            };
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (
                rf </span>* x /<span style="color: rgba(0, 0, 0, 1)"> 32768f,
                rf </span>* y /<span style="color: rgba(0, 0, 0, 1)"> 32768f,
                rf </span>* z /<span style="color: rgba(0, 0, 0, 1)">32768f
            );
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">enum</span> AcclRange : <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">
    {
        x2g </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
        x4g </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
        x8g </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
        x16g </span>= <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">enum</span> GyroRange : <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">
    {
        x250dps </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
        x500dps </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
        x1000dps </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
        x2000dps </span>= <span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
    }</span></pre>
</div>
<p>两个枚举类型：AcclRange 表示重力加速度的量程，即 2g、4g等；GyroRange 表示陀螺仪的量程，像 500 度/秒。</p>
<p>这里重点看看计数的读取。在读取加速度时，要把读到的 16 位有符号整数进行处理。实际上就是读数除以量程，比如，±2g，就用 32768 / 2 = 16384。假设读数为x，就用x除以16384，这样就知道是多少个 g 了。通用公式是：</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511163910379-397177401.png" alt="" width="101" height="46" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;其中，r 是读数，g 是重力加速度，一般取值 9.8。量程就是前面说的2、4、8、16。所以才有这个代码：</p>
<div class="cnblogs_code">
<pre>            <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转换倍数
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取倍数（量程）</span>
            <span style="color: rgba(0, 0, 255, 1)">float</span> fac = AccelerRange <span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">
            {
                AcclRange.x2g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">2.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x4g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">4.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x8g       </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">8.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                AcclRange.x16g      </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">16.0f</span><span style="color: rgba(0, 0, 0, 1)">,
                _                   </span>=&gt; <span style="color: rgba(128, 0, 128, 1)">0.0f</span><span style="color: rgba(0, 0, 0, 1)">
            };
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> x,
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> y,
                fac </span>* G / 32768f *<span style="color: rgba(0, 0, 0, 1)"> z
            );</span></pre>
</div>
<p>陀螺仪的原理也一样，可以看上面贴的完整代码。</p>
<p>&nbsp;</p>
<p>最后，做个测试。</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">using</span> Devices.Mpu6050 mpudev = <span style="color: rgba(0, 0, 255, 1)">new</span>(i2cBusid: <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">,
                                         devAddress: Devices.Mpu6050.DEFAULT_ADDR);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 唤醒</span>
<span style="color: rgba(0, 0, 0, 1)">            mpudev.WakeUp();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定重力加速度量程为 4g</span>
            mpudev.AccelerRange =<span style="color: rgba(0, 0, 0, 1)"> Devices.AcclRange.x4g;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定陀螺仪的量程为 500 d/s</span>
            mpudev.GyroRange =<span style="color: rgba(0, 0, 0, 1)"> Devices.GyroRange.x500dps;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出验证</span>
            Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">加速度量程：{0}\n角速度量程：{1}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                        mpudev.AccelerRange </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">
                        {
                            Devices.AcclRange.x2g   </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 2g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.AcclRange.x4g   </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 4g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.AcclRange.x8g   </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 8g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.AcclRange.x16g  </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 16g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            _                       </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">未知</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                        },
                        mpudev.GyroRange </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">
                        {
                            Devices.GyroRange.x250dps       </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 250dps</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.GyroRange.x500dps       </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 500dps</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.GyroRange.x1000dps      </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 1000dps</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            Devices.GyroRange.x2000dps      </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">+/- 2000dps</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                            _                               </span>=&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">未知</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                        });
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">------------------------</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">bool</span> looping=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            Console.CancelKeyPress </span>+= (_,_)=&gt; looping = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">每一输输出后会暂停，以方便观察数据，可按任意键继续。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            </span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)">(looping)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 分别读出加速度和角速度</span>
                <span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> acc_x, acc_y, acc_z;
                (acc_x, acc_y, acc_z) </span>=<span style="color: rgba(0, 0, 0, 1)"> mpudev.GetAccelerometer();
                </span><span style="color: rgba(0, 0, 255, 1)">float</span><span style="color: rgba(0, 0, 0, 1)"> gy_x, gy_y, gy_z;
                (gy_x, gy_y, gy_z) </span>=<span style="color: rgba(0, 0, 0, 1)"> mpudev.GetGyroscope();
                </span><span style="color: rgba(0, 0, 255, 1)">string</span> output = $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">加速度：x={acc_x}, y={acc_y}, z={acc_z}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
                output </span>+= $<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n角速度：x={gy_x}, y={gy_y}, z={gy_z}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
                Console.WriteLine(output);
                Console.Write(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                Console.ReadKey(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        }
    }</span></pre>
</div>
<p>随即 build 源码，上传到树莓派上运行一下。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202105/367389-20210511164550808-132499784.png" height="300" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;数据是读出来了，至于怎么去用，那得看你的用途了。多数时候，MPU6050会用在无人机上，不过，姿态运算的算法真的太复杂了，老周也没弄明白，所以这里也没办法跟大伙聊了。不过要判断是不是有人拿模块在做“摇一摇”运动还是好办的，因为剧烈晃动时陀螺仪的读数会增大，加速度x、y的读数也会增大。</p>
<p>&nbsp;</p>
<p>========================================================</p>
<p>&nbsp;最后，咱们聊聊给大草莓添加开机按钮的事。很简单，因为这是硬件上设定好的，你也不用改什么配置（根本没法配置），方法就是：<strong><span style="color: rgba(0, 0, 128, 1)">向 GPIO3 引脚输出低电平</span></strong>，树莓派就会开机。树莓派在上电后会自动开机的，这里加开机按钮的用途是当你关机后想再开机，如果不加个按钮，你就要拔掉电源线再接上，重新上电，或者关掉插座再通电。如果加了按钮，按一下就会开机了。</p>
<p>那按钮怎么接呢？最简单方案就是 GPIO3 -- 按钮 -- GND，即在 GPIO3 和 GND 之间接个按钮。原理就是 GND 是相对 0V，它就是输出低电平的最简单方案。只要和 GPIO3 接通，GPIO3 读到的就是低电平，所以就会开机。当然了，你用两根线把 GPIO3 和 GND 短接一下也可以开机的。</p>
<p>如果想用关机键，就要配置了。开机是硬件层定义的，但关机是系统驱动集成的，应该算是软件层定义的。所以，给草莓派加关机按钮就要配置了。打开 /boot/config.txt</p>
<p>sudo nano /boot/config.txt</p>
<p>加上：</p>
<div class="cnblogs_code">
<pre>dtoverlay=gpio-shutdown, gpio_pin=<span style="color: rgba(128, 0, 128, 1)">11</span></pre>
</div>
<p>gpio_pin 指定用哪个引脚来触发关机，默认是 GPIO3，这里我配置了11。如果省略 gpio_pin 参数，就是3。于是，如果你打算用一个按钮来完成关机和开机动作，那就保持默认。这样一来，在开机状态下按一下按钮，就会关机；关机后再按一下就开机。</p>
<p>关机信号默认也是低电平触发，所以你把用来关机的引脚和 GND 短接一下也能关机的。如果希望高电平触发，可以用&nbsp;active_low 参数来配置，如果为1，表明低电平触发，在高电平向低电平跳转（过渡，下降沿）的时候发送关机命令；如果配置为0，表示高电平触发，当电平从低跳转到高时发送关机命令。</p>
<div class="cnblogs_code">
<pre>dtoverlay=gpio-shutdown, gpio_pin=<span style="color: rgba(128, 0, 128, 1)">11</span>, active_low=<span style="color: rgba(128, 0, 128, 1)">0</span></pre>
</div>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-11 17:12</span>&nbsp;
<a href="https://www.cnblogs.com/tcjiaan/">东邪独孤</a>&nbsp;
阅读(<span id="post_view_count">87</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14751964" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14751964);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 113198, cb_blogApp = 'tcjiaan', cb_blogUserGuid = '9874e16f-6837-e111-b988-842b2b196315';
    var cb_entryId = 14751964, cb_entryCreatedDate = '2021-05-11 17:12', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 东邪独孤
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAju3syv-1HDIzUhRv1m-_n_gM8gyhiMETg37eZi5bKCL53W0gHBm-lI3h1cFhSgktcAV_2umZotuUmkxr1NK3xjLjxza_mWt2Id-rVGW81DCbK6OnFPVgla3fjFqcmOaUao" />
</body>
</html>
