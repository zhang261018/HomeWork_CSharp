<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="一：背景 1. 讲故事 这段时间项目延期，加班比较厉害，博客就稍微停了停，不过还是得持续的技术输出呀！ 园子里最近挺热闹的，精致码农大佬分享了三篇文章： 为什么要小心使用 Task.Run [http" />
    <meta property="og:description" content="一：背景 1. 讲故事 这段时间项目延期，加班比较厉害，博客就稍微停了停，不过还是得持续的技术输出呀！ 园子里最近挺热闹的，精致码农大佬分享了三篇文章： 为什么要小心使用 Task.Run [http" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>对 精致码农大佬 说的 Task.Run 会存在 内存泄漏 的思考 - 一线码农 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd.min.css?v=FftQhR2MvKTGGXxV0VXlcGGt4XBM0_1XGJmu6kYD9bg" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/huangxincheng/custom.css?v=qCwvwmEm1ZtPIqAjWw3cb1l/1fY=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd-mobile.min.css?v=t8lZrYXGRE8kAD_d-besbRXwkXSQmMprnkoJVYlZl-g" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/huangxincheng/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/huangxincheng/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/huangxincheng/wlwmanifest.xml" />
    <script>
        var currentBlogId = 85195;
        var currentBlogApp = 'huangxincheng';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'iMetro_HD';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-12-09 10:13';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/huangxincheng/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/huangxincheng/"></a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/huangxincheng/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%80%E7%BA%BF%E7%A0%81%E5%86%9C">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/huangxincheng/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangxincheng/p/14107100.html">
    <span>对 精致码农大佬 说的 Task.Run 会存在 内存泄漏 的思考</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一：背景">一：背景</h2>
<h3 id="1-讲故事">1. 讲故事</h3>
<p>这段时间项目延期，加班比较厉害，博客就稍微停了停，不过还是得持续的技术输出呀！ 园子里最近挺热闹的，精致码农大佬分享了三篇文章：</p>
<ul>
<li>为什么要小心使用 Task.Run   [<a href="https://www.cnblogs.com/willick/p/14078259.html" target="_blank">https://www.cnblogs.com/willick/p/14078259.html</a>]</li>
<li>小心使用 Task.Run 续篇      [<a href="https://www.cnblogs.com/willick/p/14100973.html" target="_blank">https://www.cnblogs.com/willick/p/14100973.html</a>]</li>
<li>小心使用 Task.Run 终篇解惑  [<a href="https://mp.weixin.qq.com/s/IMPgSsxTW0LGArfPP7rQXw" target="_blank">https://mp.weixin.qq.com/s/IMPgSsxTW0LGArfPP7rQXw</a>]</li>
</ul>
<p>核心代码如下：</p>
<pre><code class="language-C#">
    class Program
    {
        static void Main(string[] args)
        {
            Test();
            Console.ReadLine();
        }

        static void Test()
        {
            var myClass = new MyClass();

            myClass.Foo();
        }
    }

    public class MyClass
    {
        private int _id = 10;

        public Task Foo()
        {
            return Task.Run(() =&gt;
            {
                Console.WriteLine($"Task.Run is executing with ID {_id}");
            });
        }
    }

</code></pre>
<blockquote>
<p>大意是： <code>Test()</code> 方法执行完之后, myClass 本该销毁，结果发现 <code>Foo()</code> 方法引用了 _id ,导致 GC 放弃了对 myClass 的回收，从而导致内存泄漏。</p>
</blockquote>
<p>如果我的理解有误，请大家帮忙指正，挺有意思，评论区也是热闹非凡，总体看下来发现还是有很多朋友对 <code>闭包</code>, <code>内存泄漏</code>,<code>GC</code> 等概念的认知比较模糊，同样作为技术博主，得要蹭点热度😄😄😄，这篇我准备从这三个方面阐述下我的认知，然后大家再回头看一下 精致 大佬的文章。</p>
<h2 id="二：对闭包的认知">二：对闭包的认知</h2>
<h3 id="1-什么是闭包">1. 什么是闭包</h3>
<p>我最早接触闭包的概念是在 js 中，关于闭包的概念，懂得人自然懂，不懂的人得要挠会头，我准备不从概念而从代码入手，帮你梳理下，先看核心代码：</p>
<pre><code class="language-C#">
    public class MyClass
    {
        private int _id = 10;

        public Task Foo()
        {
            return Task.Run(() =&gt;
            {
                Console.WriteLine($"Task.Run is executing with ID {_id}");
            });
        }
    }

</code></pre>
<p>我发现很多人迷惑就迷惑在 Task.Run 委托中的 _id，因为它拿的是 MyClass 中的 _id，貌似实现了时空穿越，其实仔细想想很简单哈, Task.Run 委托中要拿 <code>MyClass._id</code>，就必须把 MyClass 自身的 this 指针作为参数 传递给委托，既然有了这个this，啥值还拿不出来哈？？？ 遗憾的是 Run 不接受任何 object 参数，所以伪代码如下：</p>
<pre><code class="language-C#">
        public Task Foo()
        {
            return Task.Run((obj) =&gt;
            {
                var self = obj as MyClass;

                Console.WriteLine($"Task.Run is executing with ID {self._id}");
            },this);
        }

</code></pre>
<p>上面的代码我相信大家都看的很清楚了，有些朋友要说了，空口无凭，凭什么你说的就是对的？？？ 没关系，我从 windbg 让你眼见为实就好啦。。。</p>
<h3 id="2-使用-windbg-验证">2. 使用 windbg 验证</h3>
<p>想验证其实很简单，用 windbg 在这条语句 <code>Console.WriteLine($"Task.Run is executing with ID {_id}");</code>  上放一个断点，命中之后看一下这个方法的参数列表就好了。</p>
<p>这句代码在我文件的第 35 行，使用命令  <code>!bpmd Program.cs:35</code> 设置断点。</p>
<pre><code class="language-C#">
0:000&gt; !bpmd Program.cs:35
0:000&gt; g
JITTED ConsoleApp4!ConsoleApp4.MyClass.&lt;Foo&gt;b__1_0()
Setting breakpoint: bp 00007FF83B2C4480 [ConsoleApp4.MyClass.&lt;Foo&gt;b__1_0()]
Breakpoint 0 hit
00007ff8`3b2c4480 55              push    rbp

</code></pre>
<p>上面的 <code>&lt;Foo&gt;b__1_0()</code> 方法就是所谓的委托方法，接下来可以用 <code>!clrstack -p</code> 查看这个方法的参数列表。</p>
<pre><code class="language-C#">
0:009&gt; !clrstack -p
OS Thread Id: 0x964c (9)
        Child SP               IP Call Site
000000BF6DB7EF58 00007ff83b2c4480 ConsoleApp4.MyClass.b__1_0() [E:\net5\ConsoleApp1\ConsoleApp4\Program.cs @ 34]
    PARAMETERS:
        this (&lt;CLR reg&gt;) = 0x0000025c26f8ac60

</code></pre>
<p>可以看到，这个方法有一个参数 this, 地址是: <code>0x0000025c26f8ac60</code>，接下来可以用 <code>!do 0x0000025c26f8ac60</code> 试着打印一下，看看到底是什么？</p>
<pre><code class="language-C#">
0:009&gt; !do 0x0000025c26f8ac60
Name:        ConsoleApp4.MyClass
MethodTable: 00007ff83b383548
EEClass:     00007ff83b3926b8
Size:        24(0x18) bytes
File:        E:\net5\ConsoleApp1\ConsoleApp4\bin\Debug\netcoreapp3.1\ConsoleApp4.dll
Fields:
              MT    Field   Offset                 Type VT     Attr            Value Name
00007ff83b28b1f0  4000001        8         System.Int32  1 instance               10 _id

</code></pre>
<p>观察上面输出，哈哈，果然不出所料，<code>0x0000025c26f8ac60</code> 就是 <code>ConsoleApp4.MyClass</code>，现在对闭包是不是已经有了新的认识啦？？？</p>
<h2 id="二：对内存泄漏的认识">二：对内存泄漏的认识</h2>
<h3 id="1-何为内存泄漏">1. 何为内存泄漏</h3>
<p>英文中有一个词组叫做 <code>Out of Control</code>，对，就是失去控制了，要想释放只能 <code>自杀式袭击</code> 了， 比如说：kill 进程，关机器。</p>
<p>好了，再回到这个例子上来，代码如下：</p>
<pre><code class="language-C#">
        static void Test()
        {
            var myClass = new MyClass();

            myClass.Foo();
        }

</code></pre>
<p>当 Test 方法执行完成之后，myClass 的栈上引用地址肯定会被抹掉的， 有意思的是此时 <code>Task.Run</code> 中的委托方法肯定还没有得到线程调度，我又发现很多人在这一块想不通了，以为 <code>内存泄漏</code> 了。 对吧 🤣🤣🤣</p>
<p>如果你明白了上一节我所说的，那就很好理解啦，哎，很长时间没有画图分析了，破例了。</p>
<img src="https://img2020.cnblogs.com/other/214741/202012/214741-20201209101307023-134410205.png" width="700" alt="图片名称" align="center">
<p>可以很清晰的看出，当执行完 <code>myClass.Foo();</code> 语句后，此时有两个地方引用了 堆上的 MyClass，当 Test 方法执行完后， <code>A 引用</code> 会被抹掉，但此时 还有 <code>B 引用</code> 存在，所以这时你不管怎么 GC，堆上的 MyClass 肯定不会被回收，如果说这种情况也算 <code>内存泄漏</code> 的话...</p>
<p>还是那句话，空口无凭，我得拿出证据来，上 windbg 说话。</p>
<h3 id="2-使用-windbg-查找-b-引用">2. 使用 windbg 查找 B 引用</h3>
<p>要想验证 B 引用的存在，思路很简单，让匿名委托方法得不到退出，然后到 托管堆 找一下 MyClass 到底还在被谁引用 即可，接下来稍微修改一下代码。</p>
<pre><code class="language-C#">
    class Program
    {
        static void Main(string[] args)
        {
            Test();

            Console.WriteLine("主线程全部执行完毕！");
            Console.ReadLine();  
        }

        static void Test()
        {
            var myClass = new MyClass();

            myClass.Foo();
        }
    }

    public class MyClass
    {
        private int _id = 10;

        public Task Foo()
        {
            return Task.Run(() =&gt;
            {
                Console.WriteLine($"Task.Run is executing with ID {_id}");

                Thread.Sleep(int.MaxValue);   //故意不让方法退出
            });
        }
    }

</code></pre>
<p><img src="https://img2020.cnblogs.com/other/214741/202012/214741-20201209101307215-371649278.png" alt="" loading="lazy"></p>
<p>用 <code>!dumpheap -stat -type MyClass</code> 查看堆上的 MyClass 实例，然后用 <code>!gcroot</code> 查看它的引用链即可，</p>
<pre><code class="language-C#">
0:000&gt; !dumpheap -stat -type MyClass
Statistics:
              MT    Count    TotalSize Class Name
00007ff839d23548        1           24 ConsoleApp4.MyClass
Total 1 objects
0:000&gt; !DumpHeap /d -mt 00007ff839d23548
         Address               MT     Size
00000284e248ac90 00007ff839d23548       24     
0:000&gt; !gcroot 00000284e248ac90
Thread 4eb0:
    0000009CD68FED60 00007FF839C646A6 ConsoleApp4.MyClass.&lt;Foo&gt;b__1_0() [E:\net5\ConsoleApp1\ConsoleApp4\Program.cs @ 39]
        rbp+10: 0000009cd68feda0
            -&gt;  00000284E248AC90 ConsoleApp4.MyClass
</code></pre>
<p>果然不出所料，MyClass 的引用正在 <code>&lt;Foo&gt;b__1_0()</code> 方法中，这也就验证了 B 引用 的存在。</p>
<h2 id="三：对gc的认知">三：对GC的认知</h2>
<p>除了大对象堆，小对象主要还是采用 三代机制 的老方法，没啥好说的，不过有一点要注意了，GC 也不会动不动就出来回收的，毕竟工作站模式的GC 在 64 bit 机器上默认有 256M 的内存大小，这 256 M 会分配给 <code>0代 + 1代</code>，说小也不小，如下图：</p>
<p><img src="https://img2020.cnblogs.com/other/214741/202012/214741-20201209101308378-811167105.png" alt="" loading="lazy"></p>
<p>其实我想表达的意思是，即使当前有 <code>A,B</code> 两个引用，实际上 99 % 的情况下都会在同一代中被回收，比如说：第 0 代。</p>
<p>现在都过了十多分钟了，可以看下 MyClass 的地址 (00000284e248ac90) 当前有没有被送到 第 1 代？ 用 <code>!eeheap -gc</code> 把托管堆的 地址段 打出来。</p>
<pre><code class="language-C#">
0:000&gt; !eeheap -gc
Number of GC Heaps: 1
generation 0 starts at 0x00000284E2481030
generation 1 starts at 0x00000284E2481018
generation 2 starts at 0x00000284E2481000

</code></pre>
<p>可以看到，即使过了十多分钟，当前 MyClass(00000284e248ac90)  还是在 0 代堆上。</p>
<h2 id="三：总结">三：总结</h2>
<p>好了，这三个概念： <code>闭包</code>, <code>内存泄漏</code>,<code>GC</code>  差不多就介绍完了，不知道可否解开了大家的疑团，最后感谢 <code>精致大佬</code> 的精彩博文。</p>
<p><strong>更多高质量干货：参见我的 GitHub: <a href="https://github.com/ctripxchuang/dotnetfly" target="_blank">dotnetfly</a></strong></p>
<img src="https://img2020.cnblogs.com/blog/214741/202005/214741-20200522143723695-575216767.png" width="600" height="200" alt="图片名称" align="center">
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-12-09 10:13</span>&nbsp;
<a href="https://www.cnblogs.com/huangxincheng/">一线码农</a>&nbsp;
阅读(<span id="post_view_count">3952</span>)&nbsp;
评论(<span id="post_comment_count">31</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14107100" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14107100);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 85195, cb_blogApp = 'huangxincheng', cb_blogUserGuid = '40a06552-abf8-df11-ac81-842b2b196315';
    var cb_entryId = 14107100, cb_entryCreatedDate = '2020-12-09 10:13', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 一线码农
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvE34AS6beSy4fUdRtGzk4_iYFLbTu-Cbxt3hqHlGtFo8hBcNJgi6qb-NRI2Z9j89l4jr713GK_FMS0E5wwH3XpKGBCEpefQQgO6ucw44tMeAgrGBiqq6tFyUtXlQGmJSQ" />
</body>
</html>
