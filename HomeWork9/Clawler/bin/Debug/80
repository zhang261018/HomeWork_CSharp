<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="你要是说手势识别这玩意儿到底用处有多大，真的不好说，大不算大，小也不算小。日常生活中见得比较多的像一些小台灯、厨房开关之类，都有使用手势识别。从实用方面看，厨房里装手势开关还不错的，有时候满手都是猪油" />
    <meta property="og:description" content="你要是说手势识别这玩意儿到底用处有多大，真的不好说，大不算大，小也不算小。日常生活中见得比较多的像一些小台灯、厨房开关之类，都有使用手势识别。从实用方面看，厨房里装手势开关还不错的，有时候满手都是猪油" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【.NET 与树莓派】九种手势识别模块（PAJ7620） - 东邪独孤 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/moonlightink/bundle-moonlightink.min.css?v=iVE30sZ6vb6blzqPWbGs2kM432fxmh8k3P9XllAp48s" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/moonlightink/bundle-moonlightink-mobile.min.css?v=axcwoS9UbqWFSKj9O2YcPP0sVreDAEIZDpcqOVKt8M4" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tcjiaan/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tcjiaan/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tcjiaan/wlwmanifest.xml" />
    <script>
        var currentBlogId = 113198;
        var currentBlogApp = 'tcjiaan';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'MoonlightInk';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-04-22 05:12';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/tcjiaan/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tcjiaan/">老周</a>
</h1>
<h2>成于天性，行于自然。</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tcjiaan/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%9C%E9%82%AA%E7%8B%AC%E5%AD%A4">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/tcjiaan/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tcjiaan/p/14687788.html">
    <span>【.NET 与树莓派】九种手势识别模块（PAJ7620）</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>你要是说手势识别这玩意儿到底用处有多大，真的不好说，大不算大，小也不算小。日常生活中见得比较多的像一些小台灯、厨房开关之类，都有使用手势识别。从实用方面看，厨房里装手势开关还不错的，有时候满手都是猪油鸡油的，再用手按按开关，过不了几个月，开关按钮都变成麦牙糖了。或者干脆整个手势开水龙头也行。不过话又说回来，这玩意儿目前的情况，识别率还不算高。你可能会说。花大价钱买个贵一些的就会准确率高了，这个嘛，还真不一定。你懂的，现在许多“高科技”产品，说难听一点就是商业泡沫，哄你去买。它加个传感器，可能成本就是3到5块钱，但它可以忽悠你这多么高端，所以我要卖贵60元。还有一些特熟悉的吹牛口号——“很贵，但很值得”、“不要买XXX，除非你看过我”。</p>
<p>手势感应有好几种芯片，老周买的是正点原子的 PAJ7620（主要是冲着九种手势识别这功能，有的只是六种手势识别）。话说这货也不便宜，说实话，当初还不如买亚博的。亚博的模块有个优点：支持多种接线法，可以用 X-pin 排线口，可以用杜邦线，也可以用鳄鱼夹。</p>
<p>该模块长这样子。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422081917824-2116406469.png" width="250" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;不要被图片误导了，拿到手之后，发现这玩意儿很小，这不，你看……</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422082638673-1840711993.png" width="400" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;手机拍照时，如果模块正在使用，你从手机屏幕上会看到有个亮点，这是PAJ7620上面的红外发射器。</p>
<p>&nbsp;</p>
<p>此模块使用 IIC（I2C）协议通信，默认的从机地址是 0x73。操作作方式是<em><strong>读写寄存器</strong></em>。每个寄存器都有其各自的地址，只要向相应的地址写入字节，数据就会存到寄存器中。</p>
<p><span style="color: rgba(51, 51, 153, 1); background-color: rgba(255, 255, 153, 1)">1、读寄存器的方法：首先向从机地址0x73写入要读的寄存器的地址；然后从模块读取一个字节，这个字节就是该寄存器的值。</span></p>
<p><span style="color: rgba(51, 51, 153, 1); background-color: rgba(255, 255, 153, 1)">2、写寄存器的方法：向从机地址0x73写入两个字节——第一个字节指定寄存器的地址，第二个字节是要写入的值。</span></p>
<p><span style="color: rgba(51, 51, 153, 1); background-color: rgba(255, 255, 153, 1)">举例：</span></p>
<p><span style="color: rgba(51, 51, 153, 1); background-color: rgba(255, 255, 153, 1)">a、要向寄存器0x42写入0x01，那么就向从机0x73发送两个字节：0x42、0x01。</span></p>
<p><span style="color: rgba(51, 51, 153, 1); background-color: rgba(255, 255, 153, 1)">b、要读取寄存器0x23的值，先向从机0x73发送一个字节0x23，然后读一个字节。</span></p>
<p>&nbsp;</p>
<p>==========================================================</p>
<p>PAJ7620 模块的寄存器不多，操作起来也不算复杂。发现有些大伙伴们说模块没反应，是不是坏了？这个不好说，不过一般不会，买到坏的模块也是需要运气的。最大的可能是你操作的流程不对。因为这个模块有点奇葩（可以为了节约电费）：<strong>通电后默认是处于休眠状态，所以是不会识别手势的</strong>。</p>
<p>所以老周估计这位同学大概是没有把模块唤醒就读取数据，那你读到的只能是00 00 00 00了。</p>
<p>好了，F话不扯，但老周也不打算把寄存器一个个地介绍，那样太无聊了，咱们结合实际的使用来阐述。</p>
<h3>No.1 选择寄存器带区（地址：0xEF）</h3>
<p>PAJ7620虽然寄存器不多，但它热爱分区。其寄存器总共分了两个带区——Bank 0 和 Bank 1。所以，有的寄存器位于 Bank 0，有的寄存器位于 Bank 1，咱们在操作时一定要注意，读写寄存器前要先切换带区，不然读到的值是不对的。</p>
<p>带区切换方法：</p>
<p>* 第一带区：向寄存器 0xEF 写入 0x00；</p>
<p>* 第二带区：向寄存器 0xEF 写入 0x01。</p>
<p>比如，寄存器地址 0x72 用于启用（使能）或禁用（失能）PAJ7620 模块，它位于 Bank 1 带区。要读写该寄存器，得分两步走（0x73是从机地址）。</p>
<p>step 1：---&gt; 0x73 写入 0xEF 0x01</p>
<p>step 2：---&gt; 0x73 读取 0x72</p>
<h3>No.2 使能寄存器（地址：0x72）</h3>
<p>这个寄存器上面提过，它位于 Bank 1 中。向这个寄存器写入 0x00 会禁用PAJ7620模块，写入 0x01 启用此模块。</p>
<h3>No.3 挂起和唤醒模块</h3>
<p>挂起，即休眠状态的值存放在寄存器 0x03 中，位于 Bank 0。寄存器的值只有第一个二进制位有用，0x00 表示模块正在工作，0x01 表示模块进入休眠。</p>
<p>要让模块进入休眠状态，步骤如下：</p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">1、向0xEF发送0x01，选择 Bank 1；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">2、向寄存器 0x72 写入 0x00，禁用模块；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">3、向寄存器0xEF写入0x00，选择 Bank 0；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">4、向寄存器0x03写入0x01，进入休眠。</span></p>
<p>通电后，模块默认也是进入挂起状态的，所以这时候是识别不了手势的，一定要先把它唤醒。唤醒比较简单，只需要正常的 IIC 信号就可以。正点原子的文档中讲述了一种唤醒方法：<span style="text-decoration: underline"><strong>读取 0x00 寄存器</strong>，<strong>如果返回 0x20</strong></span> 表明成功唤醒。</p>
<p>模块被唤醒后仍然处于被禁用（失能）状怘，故<span style="text-decoration: underline"><strong>唤醒后还要向地址为 0x72 的寄存器写入 0x01</strong></span> 才算完成。至于 0x03 寄存器（挂起）不必理会，它会自动清零。</p>
<p>有大伙伴说 PAJ7620 模块没反应，很可能就是在唤醒之后忘了使能（写 0x72 寄存器）模块。</p>
<p>至此，可以总结出，模块的初始化过程应该是这样的？</p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">1、向从机 0x73 循环读取 0x00 寄存器，直到它返回 0x20，完成唤醒操作；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">2、向寄存器 0xEF 写入 0x01 切换到 Bank 1 带区；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">3、向寄存器 0x72 写入 0x01，使模块进入正常工作状态。</span></p>
<h3>No.4 设置手势检测的标志位（寄存器地址：0x41 和 0x42）</h3>
<p>这两个寄存器并不是用来读取被检测到的手势，而是设定模块支持哪几个手势的检测。每个二进制位表示一种手势，若为1则表示可以检测该手势；若为0则模块不检测该手势。每个寄存器存放一个字节，共八位。咱们前面扯过，PAJ7620模块支持九种手势的识别，所以一个字节八位，放不下呢。寄存器 0x41 存放前八种手势的标志，寄存器 0x42 存放剩下一种手势。故实际上 0x42 中只用到了第一个二进制位，其余七个用不上。</p>
<h3>No.5 手势检测结果（寄存器地址：0x43 和 0x44）</h3>
<p>这两个寄存器才是真正用来读取手势检测结果，同理，由于一个字节的八位不够用，所以用了两个寄存器。如果某一位的值为1则表明检测到此手势；反之为0就是没检测到。</p>
<p>0x41、0x42 与 0x43、0x44 中的二进制位是一一对应的。文档中的默认定义如下：</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422121459775-659211787.png" width="280" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;二进制位从低到高：上、下、左、右、前、后、顺时针、逆时针。剩下一个手势在第二个字节的最低位，手势为挥手——就是 Say Goodbye 的动作，手掌放在模块前来回摇动。</p>
<p>&nbsp;</p>
<p>不过，这个定义只是相对的，毕竟我们在真实环境使用时。模块的安装方向可以旋转 X 角度。这时候，要多做测试，重新定义各个二进制位所对应的手势。按照正点原子的文档所述，正确的放置方位是这样的。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422122110799-1769267617.png" width="300" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;但老周是这样放的。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422122411831-1989935411.png" width="260" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;所以手势的方向就得重新定义了，总之，一个二进制位对应着一种手势，至于代表哪种手势，视你放置模块的方向来确定，可以多试试。</p>
<p>&nbsp;</p>
<p>====================================================</p>
<p>好，上面内容是对模块的核心功能介绍，有了上面的认知，再将其转化为程序代码就好办了。为了用起来更香，比较好的方案是进行类封装——老周写了个PAJ7620类，此类包含以下方法：</p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">*&nbsp;WakeUp：唤醒模块；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">*&nbsp;Suspend：挂起模块；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">* SetEnable：启用/禁用模块；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">* GetGesture：获取检测到的手势；</span></p>
<p><span style="background-color: rgba(204, 255, 204, 1); color: rgba(51, 51, 51, 1)">* SelectBank0 和 SelectBank1：切换寄存器带区。</span></p>
<p>PAJ7620 模块默认情况下会启用对九种手势的检测，因此老周的代码中未对寄存器 0x41 和 0x42 进行读写，有兴趣的大伙伴可以自己加上，反正操作都一样，就是对寄存器的读和写。</p>
<p>首先，咱们把要用到的寄存器地址作为常量声明，后面引用起来方便。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> SELECTE_BANK = <span style="color: rgba(128, 0, 128, 1)">0xEF</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">切换带区</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> BANK0 = <span style="color: rgba(128, 0, 128, 1)">0x00</span>;        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">带区0</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> BANK1 = <span style="color: rgba(128, 0, 128, 1)">0x01</span>;        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">带区1</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> ISENABLE = <span style="color: rgba(128, 0, 128, 1)">0x72</span>;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使能/失能模块</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> GES_DETECT = <span style="color: rgba(128, 0, 128, 1)">0x43</span>;   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">读取手势</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> GES_DETECT2 = <span style="color: rgba(128, 0, 128, 1)">0x44</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">读取手势（第九种）</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> SUSPEND = <span style="color: rgba(128, 0, 128, 1)">0x03</span>;      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使模块挂起（休眠）</span></pre>
</div>
<p>下面是模块的默认从机地址——0x73。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> DEFAULT_ADDR = <span style="color: rgba(128, 0, 128, 1)">0x73</span>;</pre>
</div>
<p>在类的构造函数中，咱们初始化 IIC 设备的连接。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> I2cDevice _device=<span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> Paj7620(<span style="color: rgba(0, 0, 255, 1)">int</span> busid = <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(0, 0, 255, 1)">int</span> address =<span style="color: rgba(0, 0, 0, 1)"> DEFAULT_ADDR)
        {
            I2cConnectionSettings settings</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">(busid, address);
            _device </span>=<span style="color: rgba(0, 0, 0, 1)"> I2cDevice.Create(settings);
        }</span></pre>
</div>
<p>从机地址使用默认地址，就是上面定义的常量&nbsp;DEFAULT_ADDR。</p>
<p>接下来就是各种方法的实现了。先看两个寄存器带区的切换，这两个方法我都写成私有方法，没有必要公开。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> SelectBank0()
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buff = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">]{
                SELECTE_BANK,
                BANK0
            };
            _device.Write(buff);
        }</span></pre>
</div>
<p>由于要发送的只有两个字节，所以呢，这里可以用&nbsp;stackalloc 直接在栈上分配内存，主要是速度快，当然你用传统的数组实例化方法也行。</p>
<p>byte[] buff = new byte[]&nbsp; {&nbsp; &nbsp; };</p>
<p>第一个字节是选择带区的寄存器地址 0xEF，第二个字节就是带区编号。另一个方法的原理一样。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> SelectBank1()
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buff = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[]
            {
                SELECTE_BANK, BANK1
            };
            _device.Write(buff);
        }</span></pre>
</div>
<p>&nbsp;</p>
<p>好，下面是 SetEnable 方法的实现，可以启用或禁用模块。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> SetEnable(<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isenable)
        {
            SelectBank1();  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">先切换到 Bank 1</span>
            <span style="color: rgba(0, 0, 255, 1)">byte</span>[] data =<span style="color: rgba(0, 0, 0, 1)">
            {
                ISENABLE,   </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">0x72</span>
                (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(isenable? <span style="color: rgba(128, 0, 128, 1)">0x01</span> : <span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)">)
            };
            _device.Write(data);
        }</span></pre>
</div>
<p>isenable 参数是个布尔值，如果是true，向寄存器0x72写入1，否则写入0。</p>
<p>接着是 Suspend 方法，挂起模块。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Suspend()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 先将其失能</span>
            SetEnable(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 再挂起</span>
            SelectBank0();  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记得切换带区</span>
            <span style="color: rgba(0, 0, 255, 1)">byte</span>[] data = {SUSPEND, <span style="color: rgba(128, 0, 128, 1)">0x01</span><span style="color: rgba(0, 0, 0, 1)">};
            _device.Write(data);
        }</span></pre>
</div>
<p>挂起前一定要将模块禁用，才能进入挂起状态。</p>
<p>下面是唤醒模块的方法。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> WakeUp()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">int</span> count = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 尝试唤醒</span>
            <span style="color: rgba(0, 0, 255, 1)">while</span>(<span style="color: rgba(128, 0, 128, 1)">0</span>==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                _device.WriteByte(</span><span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)">);
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等待700微秒即可
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1毫秒一般够用</span>
                Sleep(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
                count</span>++<span style="color: rgba(0, 0, 0, 1)">;
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> back =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
                </span><span style="color: rgba(0, 0, 255, 1)">if</span>(back == <span style="color: rgba(128, 0, 128, 1)">0x20</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                }
                </span><span style="color: rgba(0, 0, 255, 1)">if</span>(count &gt; <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 多次尝试均无法唤醒模块</span>
                    <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Exception(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">模块无法唤醒</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
                Sleep(</span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使能</span>
            SetEnable(<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        }</span></pre>
</div>
<p>WakeUp 方法其实分两个阶段：先是读寄存器0x00，在读寄存器时会向模块发信息，就等于发出唤醒信号（任何 IIC 通信都会包含 Start 时序），然后尝试五次，如果五次都唤不醒，估计是睡死了，就抛异常。</p>
<p>第二阶段是启用（使能）模块，调用 SetEnable 方法。</p>
<p>&nbsp;</p>
<p>最后是核心方法，读出检测到的手势。</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> GetGesture()
        {
            SelectBank0();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 前八个</span>
<span style="color: rgba(0, 0, 0, 1)">            _device.WriteByte(GES_DETECT);
            </span><span style="color: rgba(0, 0, 255, 1)">byte</span> p1 =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 第九个</span>
<span style="color: rgba(0, 0, 0, 1)">            _device.WriteByte(GES_DETECT2);
            </span><span style="color: rgba(0, 0, 255, 1)">byte</span> p2 =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合起来</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span> (p2 &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">8</span>) |<span style="color: rgba(0, 0, 0, 1)"> p1;
        }</span></pre>
</div>
<p>前文说过，手势共有九种，分配在两个字节上，第一个字节从寄存器 0x43 中读出，第二个从 0x44 中读出。为了用起来方便，老周把两个字节合起来，转换为 int 类型的值。从低位起，1 - 9位依次表示检测到的九种手势。</p>
<p>&nbsp;</p>
<p>下面是完整代码，各位可以抄来即食。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Device.I2c;
</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Thread;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> Device
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Paj7620 : IDisposable
    {
        </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 寄存器列表
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> SELECTE_BANK = <span style="color: rgba(128, 0, 128, 1)">0xEF</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">切换带区</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> BANK0 = <span style="color: rgba(128, 0, 128, 1)">0x00</span>;        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">带区0</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> BANK1 = <span style="color: rgba(128, 0, 128, 1)">0x01</span>;        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">带区1</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> ISENABLE = <span style="color: rgba(128, 0, 128, 1)">0x72</span>;     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使能/失能模块</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> GES_DETECT = <span style="color: rgba(128, 0, 128, 1)">0x43</span>;   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">读取手势</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> GES_DETECT2 = <span style="color: rgba(128, 0, 128, 1)">0x44</span>;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">读取手势（第九种）</span>
        <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">byte</span> SUSPEND = <span style="color: rgba(128, 0, 128, 1)">0x03</span>;      <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使模块挂起（休眠）</span>
        <span style="color: rgba(0, 0, 255, 1)">#endregion</span>

        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 默认地址
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> DEFAULT_ADDR = <span style="color: rgba(128, 0, 128, 1)">0x73</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> I2cDevice _device=<span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> Paj7620(<span style="color: rgba(0, 0, 255, 1)">int</span> busid = <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(0, 0, 255, 1)">int</span> address =<span style="color: rgba(0, 0, 0, 1)"> DEFAULT_ADDR)
        {
            I2cConnectionSettings settings</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">(busid, address);
            _device </span>=<span style="color: rgba(0, 0, 0, 1)"> I2cDevice.Create(settings);
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Dispose()
        {
            Suspend();
            _device</span>?<span style="color: rgba(0, 0, 0, 1)">.Dispose();
        }

        </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 公共方法

        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 唤醒模块
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> WakeUp()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">int</span> count = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 尝试唤醒</span>
            <span style="color: rgba(0, 0, 255, 1)">while</span>(<span style="color: rgba(128, 0, 128, 1)">0</span>==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                _device.WriteByte(</span><span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)">);
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 等待700微秒即可
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1毫秒一般够用</span>
                Sleep(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
                count</span>++<span style="color: rgba(0, 0, 0, 1)">;
                </span><span style="color: rgba(0, 0, 255, 1)">byte</span> back =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
                </span><span style="color: rgba(0, 0, 255, 1)">if</span>(back == <span style="color: rgba(128, 0, 128, 1)">0x20</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                }
                </span><span style="color: rgba(0, 0, 255, 1)">if</span>(count &gt; <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 多次尝试均无法唤醒模块</span>
                    <span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Exception(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">模块无法唤醒</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                }
                Sleep(</span><span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">);
            }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使能</span>
            SetEnable(<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 挂起，使模块进入休眠状态
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Suspend()
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 先将其失能</span>
            SetEnable(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 再挂起</span>
            SelectBank0();  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记得切换带区</span>
            <span style="color: rgba(0, 0, 255, 1)">byte</span>[] data = {SUSPEND, <span style="color: rgba(128, 0, 128, 1)">0x01</span><span style="color: rgba(0, 0, 0, 1)">};
            _device.Write(data);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 启用或禁用模块
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="isenble"&gt;</span><span style="color: rgba(0, 128, 0, 1)">true：启用；false：禁用</span><span style="color: rgba(128, 128, 128, 1)">&lt;/param&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> SetEnable(<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> isenable)
        {
            SelectBank1();  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">先切换到 Bank 1</span>
            <span style="color: rgba(0, 0, 255, 1)">byte</span>[] data =<span style="color: rgba(0, 0, 0, 1)">
            {
                ISENABLE,   </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">0x72</span>
                (<span style="color: rgba(0, 0, 255, 1)">byte</span>)(isenable? <span style="color: rgba(128, 0, 128, 1)">0x01</span> : <span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)">)
            };
            _device.Write(data);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 获取识别的手势
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;</span><span style="color: rgba(0, 128, 0, 1)">包含九个标志位</span><span style="color: rgba(128, 128, 128, 1)">&lt;/returns&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> GetGesture()
        {
            SelectBank0();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 前八个</span>
<span style="color: rgba(0, 0, 0, 1)">            _device.WriteByte(GES_DETECT);
            </span><span style="color: rgba(0, 0, 255, 1)">byte</span> p1 =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 第九个</span>
<span style="color: rgba(0, 0, 0, 1)">            _device.WriteByte(GES_DETECT2);
            </span><span style="color: rgba(0, 0, 255, 1)">byte</span> p2 =<span style="color: rgba(0, 0, 0, 1)"> _device.ReadByte();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 合起来</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span> (p2 &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">8</span>) |<span style="color: rgba(0, 0, 0, 1)"> p1;
        }
        </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>

        <span style="color: rgba(0, 0, 255, 1)">#region</span> 私有方法

        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 切换到 Bank0
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> SelectBank0()
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buff = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">]{
                SELECTE_BANK,
                BANK0
            };
            _device.Write(buff);
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 切换到 Bank1
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> SelectBank1()
        {
            Span</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; buff = <span style="color: rgba(0, 0, 255, 1)">stackalloc</span> <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[]
            {
                SELECTE_BANK, BANK1
            };
            _device.Write(buff);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span><span style="color: rgba(0, 0, 0, 1)">
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>好了，基本类型封装完毕，而后咱们就可以拿来耍了，这里老周没准备高级的应用，仅仅是写个测试程序。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Thread;
</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> System.Console;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Device;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> myapp
{
    </span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
    {
        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> isRunning = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">using</span> Paj7620 paj = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)">();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 唤醒</span>
<span style="color: rgba(0, 0, 0, 1)">            paj.WakeUp();
            WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">设备已唤醒</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

            CancelKeyPress </span>+= (_, _) =&gt; isRunning = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

            Sleep(</span><span style="color: rgba(128, 0, 128, 1)">500</span><span style="color: rgba(0, 0, 0, 1)">);
            isRunning </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;

            </span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> (isRunning)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">int</span> res =<span style="color: rgba(0, 0, 0, 1)"> paj.GetGesture();
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变成二进制显示</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> str = Convert.ToString(res, <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">);
                str </span>= str.PadLeft(<span style="color: rgba(128, 0, 128, 1)">9</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
                str </span>= <span style="color: rgba(0, 0, 255, 1)">string</span>.Join(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> | </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, str.ToCharArray());
                WriteLine(str);

                WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">按任意键继续</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                ReadKey(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
            }

        }
    }
}</span></pre>
</div>
<p>硬件接线：只接VCC、GND、SCL、SDA四个针脚即可，其他可以不管。</p>
<p>VCC 接树莓派的 3.3V，5V也可以，模块上有做宽电压兼容；</p>
<p>GND 接树莓派的GND；</p>
<p>SCL 接树莓派的 GPIO 3;</p>
<p>SDA 接树莓派的 GPIO 2。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422171811431-945513053.png" width="400" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>运行这个程序后，你可以对着它做各种手势，然后随便按个键继续循环，屏幕会打印出各个二进制位的值。</p>
<p><img src="https://img2020.cnblogs.com/blog/367389/202104/367389-20210422165628423-1130431457.png" width="320" loading="lazy"></p>
<p>前面老周说过，对九种手势的定义是相对的，取决于你把模块的安装方向和角度。不过，第九位（挥手）是不变的，因为不管你怎么安放，挥手的动作都是来回晃动几下，识别结果一样；再有，前、后两个手势也一样，把模块水平放置，发射光头朝上，然后你的手从上往下接近模块，就是向前的手势；相反，你的手从离模块较近的位置往上抬起就是向后。安装方向的不同一般只影响上、下、左、右四个方向上的手势。</p>
<p>&nbsp;</p>
<p>这个模块其实识别的准确率不是很高，容易受干扰，比如你在旁边开个台灯，或者拿手电筒斜着在模块上晃几下，或者在它旁边吃烤鸭，都会导致识别错误，或者干脆识别不了。</p>
<p>至于说，使用这个模块能干吗呢？现在流行人工智……Zhang……哦不，Z能，所以，你可以用它来做个手势开灯，手势控制智能车转弯（估计会翻车），手势开门（不知道会不会夹到人），手势操作轮椅（有风险）。再深入一点的，上完厕所，对着马桶挥挥手，自动冲水，不带走一片云彩。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-04-22 17:12</span>&nbsp;
<a href="https://www.cnblogs.com/tcjiaan/">东邪独孤</a>&nbsp;
阅读(<span id="post_view_count">88</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14687788" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14687788);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 113198, cb_blogApp = 'tcjiaan', cb_blogUserGuid = '9874e16f-6837-e111-b988-842b2b196315';
    var cb_entryId = 14687788, cb_entryCreatedDate = '2021-04-22 17:12', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 东邪独孤
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvU_lwDBDdYUMRVTPxznmXBj_CcF4XXpmr9xEW8B6WeWwaqBBSxt2hB-7RrCnAcS2S9gmF_l9548yWp8FWd9b4gOAUHDtVd5o1H6WG4w8whb9kXbc96_TyHybpauTiH9_E" />
</body>
</html>
