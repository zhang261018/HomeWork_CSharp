<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="1.&amp;#160;Variables Are Not Boxes 2.&amp;#160;Identity, Equality, and Aliases 3.&amp;#160;Copies Are Shallow b" />
    <meta property="og:description" content="1.&amp;#160;Variables Are Not Boxes 2.&amp;#160;Identity, Equality, and Aliases 3.&amp;#160;Copies Are Shallow b" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>8. Object References, Mutability, and Recycling - LB477 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/lb477/custom.css?v=ZmEXQV8AidrHOD&#x2B;5SzYdKlaVjEc=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=OayYBbtUbH4FYkn_bTL4VVf4DsEOiTHSWhbl11KyY6Y" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lb477/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lb477/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lb477/wlwmanifest.xml" />
    <script>
        var currentBlogId = 495396;
        var currentBlogApp = 'lb477';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'Custom';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2019-05-27 10:57';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://developer.aliyun.com/learning/trainingcamp/realtime/1?utm_content=g_1000268661" target="_blank" onclick="ga('send', 'event', 'Link', 'click', 'aliyun-realtime-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202105/35695-20210509221214222-438425324.png" alt="" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        <div class="dark-loading">
  <div class="box">
    <h2>Loading</h2>
    <span></span><span></span><span></span><span></span><span></span><span></span><span></span>
  </div>
</div>
    </div>
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lb477/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lb477/">LB's Blog</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lb477/">
首页</a>
</li>
<li>


</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/lb477/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lb477/p/10929550.html">
    <span>8. Object References, Mutability, and Recycling</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>1.&nbsp;Variables Are Not Boxes</h3>
<p><img src="https://img2018.cnblogs.com/blog/1614145/201905/1614145-20190527091232631-1905891020.png" alt=""></p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;"># Think variables as sticky notes
a = [1, 2, 3]
b = a
a.append(4)
print b  # [1, 2, 3, 4]

# 1. The object is created before the assignment. So variable is
# assigned to an object, not the other way around. 
</pre>
</div>
<h3>&nbsp;2.&nbsp;Identity, Equality, and Aliases</h3>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">charles = {'name': 'Charles', 'born': 1832}
lewis = charles  # alias
print lewis is charles  # True
print id(lewis) == id(charles)  # True
lewis['born'] = 1844
print charles  # {'born': 1844, 'name': 'Charles'}

alex = {'name': 'Charles', 'born': 1844}
print alex == charles  # True (same value)
print alex is charles  # False (different identities)


# 1. In CPython, id() returns the memory address of the object, but
# it may be something else in another Python interpreter. The key 
# point is that the ID is guaranteed to be a unique numeric label, 
# and it will never change during the life of the object.
# 2. The is operator is faster than ==, because it cannot be
# overloaded, so Python does not have to find and invoke special
# methods to evaluate it, and computing is as simple as comparing
# two integer IDs.
# 3. a == b is syntactic sugar for a.__eq__(b). The __eq__ method
# inherited from object compares object IDs, so it produces the
# same result as is. But most built-in types override __eq__ with
# more meaningful implementations that actually take into account
# the values of the object attributes. Equality may involve a lot
# of processing. (large collections / deeply nested structures)
</pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">t1 = (1, 2, [30, 40])
t2 = (1, 2, [30, 40])
print t1 == t2  # True
print id(t1[-1])  # 4302515784
t1[-1].append(99)
print t1  # (1, 2, [30, 40, 99])
print id(t1[-1])  # 4302515784
print t1 == t2  # False

# 1. What can never change in a tuple is the identity of the
# items it contains.
# 2. Tuples, like most Python collections—lists, dicts, sets,
# etc.--hold references to objects. On the other hand, single-type
# sequences like str, bytes, and array.array are flat: they don’t
# contain references but physically hold their data--characters,
# bytes, and numbers--in contiguous memory.</pre>
</div>
<h3>&nbsp;3.&nbsp;Copies Are Shallow by Default</h3>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">import copy
l1 = [3, [55, 44], (7, 8, 9)]
l2 = list(l1)  # l2 = l1[:] or l2 = copy.copy(l1)
print l2  # [3, [55, 44], (7, 8, 9)]
print l2 == l1  # True
print l2 is l1  # False
l1.append(100)
l1[1].remove(55)
print l1  # [3, [44], (7, 8, 9), 100]
print l2  # [3, [44], (7, 8, 9)]
l3 = copy.deepcopy(l2)
l3[1].append(55)
print l3  # [3, [44, 55], (7, 8, 9)]
print l2  # [3, [44], (7, 8, 9)]

# 1. Using the constructor or [:] or copy.copy() produces a shallow copy.</pre>
</div>
<p><img style="border: 1px solid rgba(0, 0, 0, 1)" src="https://img2018.cnblogs.com/blog/1614145/201905/1614145-20190527103028654-1832859352.png" alt=""></p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;"># Cyclic references
a = [10, 20]
b = [a, 30]
a.append(b)
print a  # [10, 20, [[...], 30]]
c = copy.deepcopy(a)
print c  # [10, 20, [[...], 30]]</pre>
</div>
<p><strong>[Notes]</strong>: You can control the behavior of both copy and deepcopy by implementing the __copy__() and __deepcopy__() special methods as described in the copy module documentation.</p>
<h3>4.&nbsp;Function Parameters as References</h3>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">def f(a, b):
	a += b
	return a

x = 1
y = 2
print f(x, y)  # 3
print x, y  # 1 2
a = [1, 2]
b = [3, 4]
print f(a, b)  # [1, 2, 3, 4]
print a, b  # [1, 2, 3, 4] [3, 4]
t = (10, 20)
u = (30, 40)
print f(t, u)  # (10, 20, 30, 40)
print t, u  # (10, 20) (30, 40)

1. The only mode of parameter passing in Python is call by sharing.
which means the parameters inside the function become aliases
of the actual arguments.
2. The result of this scheme is that a function may change any
mutable object passed as a parameter, but it cannot change the
identity of those objects


class A:
	def __init__(self, a_list=[]):
		self.a_list = a_list
	def add(self, name):
		self.a_list.append(name)

a1 = A()
a1.add('A')
print a1.a_list  # ['A']
a2 = A()
a2.add('B')
print a2.a_list  # ['A', 'B']
print a1.a_list  # ['A', 'B']
print a1.a_list is a2.a_list  # True
print A.__init__.__defaults__[0] is a1.a_list  # True

# 1. Two objects don’t get an initial list end up sharing the same
# list among themselves.
# 2. When the module is loaded, and the default values become
# attributes of the function object. So if a default value is a
# mutable object, and you change it, the change will affect every
# future call of the function.


class B:
	def __init__(self, a_list=None):
		if a_list is None:
			self.a_list = []
		else:
			self.a_list = a_list
			# self.a_list = list(a_list)  # make a copy
	def add(self, name):
		self.a_list.append(name)

l = [1, 2, 3]
b1 = B(l)
b1.add(5)
print b1.a_list  # [1, 2, 3, 5]
print l  # [1, 2, 3, 5]

# 1. You should think twice before aliasing the argument object
# by simply assigning it to an instance variable in your class.
# If in doubt, make a copy.
</pre>
</div>
<h3>&nbsp;5.&nbsp;del and Garbage Collection</h3>
<ul>
<li>The del statement deletes names, not objects. An object may be garbage collected as result of a del command, but only if the variable deleted holds the last reference to the object, or if the object becomes unreachable. Rebinding a variable may also cause the number of references to an object to reach zero, causing its destruction.</li>
<li><strong>unreachable</strong>:&nbsp;If two objects refer to each other, they may be destroyed if the garbage collector determines that they are otherwise unreachable because their only references are their mutual references.</li>
<li>
<p>There is a __del__ special method, but it does not cause the disposal of the instance, and should not be called by your code.&nbsp;__del__ is invoked by the Python interpreter when the instance is about to be destroyed to give it a chance to release external re‐sources. You will seldom need to implement __del__ in your own code</p>
</li>
<li>
<p>In CPython, the primary algorithm for garbage collection is reference counting. Es‐sentially, each object keeps count of how many references point to it. As soon as that refcount reaches zero, the object is immediately destroyed: CPython calls the __del__ method on the object (if defined) and then frees the memory allocated to the object. In CPython 2.0, a generational garbage collection algorithm was added to detect groups of objects involved in reference cycles—which may be unreachable even with outstanding references to them, when all the mutual references are contained within the group.&nbsp;Other implementations of Python have more sophisticated garbage collectors that do not rely on reference counting, which means the __del__ method may not be called immediately when there are no more references to the object.</p>
</li>
</ul>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">import weakref
s1 = {1, 2, 3}
s2 = s1
def bye():
	print('Gone with the wind...')
ender = weakref.finalize(s1, bye)
print(ender.alive)  # True
del s1
print(ender.alive)  # True
s2 = 'spam'  # Gone with the wind...
print(ender.alive)  # False

# 1. del does not delete objects, but objects may be deleted
# as a consequence of being unreachable after del is used.
# 2. This works because final ize holds a weak reference to {1, 2, 3}.</pre>
</div>
<h3>6.&nbsp;Weak References</h3>
<p>P236</p>
<h3>7.&nbsp;Tricks Python Plays with Immutables</h3>
<p>P240</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-05-27 10:57</span>&nbsp;
<a href="https://www.cnblogs.com/lb477/">LB477</a>&nbsp;
阅读(<span id="post_view_count">111</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10929550" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10929550);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 495396, cb_blogApp = 'lb477', cb_blogUserGuid = 'd6200025-a336-497e-1a00-08d69c580dca';
    var cb_entryId = 10929550, cb_entryCreatedDate = '2019-05-27 10:57', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 LB477
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjvlqQRoWgm3bWtgA5epSr-TnmCauZEA4cntW_MYNt-Qna4Qg7w9qrkRSDfiaMCJ4QEHFP7YV-Pj4hTVnvZmgHktVT4NPHMYFfLYbqqE2q52Qhvifqr7cTDz3QyxTU286rc" />
</body>
</html>
